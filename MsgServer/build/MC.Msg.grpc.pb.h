// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MC.Msg.proto
#ifndef GRPC_MC_2eMsg_2eproto__INCLUDED
#define GRPC_MC_2eMsg_2eproto__INCLUDED

#include "MC.Msg.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace MC {
namespace Msg {

class MSG final {
 public:
  static constexpr char const* service_full_name() {
    return "MC.Msg.MSG";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // UPLOAD
    virtual ::grpc::Status UpdateUserInfo(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq& request, ::MC::Msg::UpdateUserInfoRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UpdateUserInfoRes>> AsyncUpdateUserInfo(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UpdateUserInfoRes>>(AsyncUpdateUserInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UpdateUserInfoRes>> PrepareAsyncUpdateUserInfo(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UpdateUserInfoRes>>(PrepareAsyncUpdateUserInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUserHead(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq& request, ::MC::Msg::UpdateUserHeadRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UpdateUserHeadRes>> AsyncUpdateUserHead(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UpdateUserHeadRes>>(AsyncUpdateUserHeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UpdateUserHeadRes>> PrepareAsyncUpdateUserHead(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UpdateUserHeadRes>>(PrepareAsyncUpdateUserHeadRaw(context, request, cq));
    }
    // SEND
    virtual ::grpc::Status SendMessageToServer(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::MC::Msg::SendMessageRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::SendMessageRes>> AsyncSendMessageToServer(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::SendMessageRes>>(AsyncSendMessageToServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::SendMessageRes>> PrepareAsyncSendMessageToServer(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::SendMessageRes>>(PrepareAsyncSendMessageToServerRaw(context, request, cq));
    }
    // GET
    virtual ::grpc::Status GetUserInfo(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq& request, ::MC::Msg::GetUserInfoRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::GetUserInfoRes>> AsyncGetUserInfo(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::GetUserInfoRes>>(AsyncGetUserInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::GetUserInfoRes>> PrepareAsyncGetUserInfo(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::GetUserInfoRes>>(PrepareAsyncGetUserInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFriends(::grpc::ClientContext* context, const ::MC::Msg::UserID& request, ::MC::Msg::UserIDList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UserIDList>> AsyncGetFriends(::grpc::ClientContext* context, const ::MC::Msg::UserID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UserIDList>>(AsyncGetFriendsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UserIDList>> PrepareAsyncGetFriends(::grpc::ClientContext* context, const ::MC::Msg::UserID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UserIDList>>(PrepareAsyncGetFriendsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // UPLOAD
      virtual void UpdateUserInfo(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq* request, ::MC::Msg::UpdateUserInfoRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUserInfo(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq* request, ::MC::Msg::UpdateUserInfoRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateUserHead(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq* request, ::MC::Msg::UpdateUserHeadRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUserHead(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq* request, ::MC::Msg::UpdateUserHeadRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SEND
      virtual void SendMessageToServer(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq* request, ::MC::Msg::SendMessageRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessageToServer(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq* request, ::MC::Msg::SendMessageRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GET
      virtual void GetUserInfo(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq* request, ::MC::Msg::GetUserInfoRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserInfo(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq* request, ::MC::Msg::GetUserInfoRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFriends(::grpc::ClientContext* context, const ::MC::Msg::UserID* request, ::MC::Msg::UserIDList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFriends(::grpc::ClientContext* context, const ::MC::Msg::UserID* request, ::MC::Msg::UserIDList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UpdateUserInfoRes>* AsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UpdateUserInfoRes>* PrepareAsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UpdateUserHeadRes>* AsyncUpdateUserHeadRaw(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UpdateUserHeadRes>* PrepareAsyncUpdateUserHeadRaw(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::SendMessageRes>* AsyncSendMessageToServerRaw(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::SendMessageRes>* PrepareAsyncSendMessageToServerRaw(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::GetUserInfoRes>* AsyncGetUserInfoRaw(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::GetUserInfoRes>* PrepareAsyncGetUserInfoRaw(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UserIDList>* AsyncGetFriendsRaw(::grpc::ClientContext* context, const ::MC::Msg::UserID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::UserIDList>* PrepareAsyncGetFriendsRaw(::grpc::ClientContext* context, const ::MC::Msg::UserID& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UpdateUserInfo(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq& request, ::MC::Msg::UpdateUserInfoRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::UpdateUserInfoRes>> AsyncUpdateUserInfo(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::UpdateUserInfoRes>>(AsyncUpdateUserInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::UpdateUserInfoRes>> PrepareAsyncUpdateUserInfo(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::UpdateUserInfoRes>>(PrepareAsyncUpdateUserInfoRaw(context, request, cq));
    }
    ::grpc::Status UpdateUserHead(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq& request, ::MC::Msg::UpdateUserHeadRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::UpdateUserHeadRes>> AsyncUpdateUserHead(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::UpdateUserHeadRes>>(AsyncUpdateUserHeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::UpdateUserHeadRes>> PrepareAsyncUpdateUserHead(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::UpdateUserHeadRes>>(PrepareAsyncUpdateUserHeadRaw(context, request, cq));
    }
    ::grpc::Status SendMessageToServer(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::MC::Msg::SendMessageRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::SendMessageRes>> AsyncSendMessageToServer(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::SendMessageRes>>(AsyncSendMessageToServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::SendMessageRes>> PrepareAsyncSendMessageToServer(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::SendMessageRes>>(PrepareAsyncSendMessageToServerRaw(context, request, cq));
    }
    ::grpc::Status GetUserInfo(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq& request, ::MC::Msg::GetUserInfoRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::GetUserInfoRes>> AsyncGetUserInfo(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::GetUserInfoRes>>(AsyncGetUserInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::GetUserInfoRes>> PrepareAsyncGetUserInfo(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::GetUserInfoRes>>(PrepareAsyncGetUserInfoRaw(context, request, cq));
    }
    ::grpc::Status GetFriends(::grpc::ClientContext* context, const ::MC::Msg::UserID& request, ::MC::Msg::UserIDList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::UserIDList>> AsyncGetFriends(::grpc::ClientContext* context, const ::MC::Msg::UserID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::UserIDList>>(AsyncGetFriendsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::UserIDList>> PrepareAsyncGetFriends(::grpc::ClientContext* context, const ::MC::Msg::UserID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::UserIDList>>(PrepareAsyncGetFriendsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UpdateUserInfo(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq* request, ::MC::Msg::UpdateUserInfoRes* response, std::function<void(::grpc::Status)>) override;
      void UpdateUserInfo(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq* request, ::MC::Msg::UpdateUserInfoRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateUserHead(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq* request, ::MC::Msg::UpdateUserHeadRes* response, std::function<void(::grpc::Status)>) override;
      void UpdateUserHead(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq* request, ::MC::Msg::UpdateUserHeadRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendMessageToServer(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq* request, ::MC::Msg::SendMessageRes* response, std::function<void(::grpc::Status)>) override;
      void SendMessageToServer(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq* request, ::MC::Msg::SendMessageRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUserInfo(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq* request, ::MC::Msg::GetUserInfoRes* response, std::function<void(::grpc::Status)>) override;
      void GetUserInfo(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq* request, ::MC::Msg::GetUserInfoRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFriends(::grpc::ClientContext* context, const ::MC::Msg::UserID* request, ::MC::Msg::UserIDList* response, std::function<void(::grpc::Status)>) override;
      void GetFriends(::grpc::ClientContext* context, const ::MC::Msg::UserID* request, ::MC::Msg::UserIDList* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MC::Msg::UpdateUserInfoRes>* AsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Msg::UpdateUserInfoRes>* PrepareAsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Msg::UpdateUserHeadRes>* AsyncUpdateUserHeadRaw(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Msg::UpdateUserHeadRes>* PrepareAsyncUpdateUserHeadRaw(::grpc::ClientContext* context, const ::MC::Msg::UpdateUserHeadReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Msg::SendMessageRes>* AsyncSendMessageToServerRaw(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Msg::SendMessageRes>* PrepareAsyncSendMessageToServerRaw(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Msg::GetUserInfoRes>* AsyncGetUserInfoRaw(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Msg::GetUserInfoRes>* PrepareAsyncGetUserInfoRaw(::grpc::ClientContext* context, const ::MC::Msg::GetUserInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Msg::UserIDList>* AsyncGetFriendsRaw(::grpc::ClientContext* context, const ::MC::Msg::UserID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Msg::UserIDList>* PrepareAsyncGetFriendsRaw(::grpc::ClientContext* context, const ::MC::Msg::UserID& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUserInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUserHead_;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessageToServer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFriends_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // UPLOAD
    virtual ::grpc::Status UpdateUserInfo(::grpc::ServerContext* context, const ::MC::Msg::UpdateUserInfoReq* request, ::MC::Msg::UpdateUserInfoRes* response);
    virtual ::grpc::Status UpdateUserHead(::grpc::ServerContext* context, const ::MC::Msg::UpdateUserHeadReq* request, ::MC::Msg::UpdateUserHeadRes* response);
    // SEND
    virtual ::grpc::Status SendMessageToServer(::grpc::ServerContext* context, const ::MC::Msg::SendMessageReq* request, ::MC::Msg::SendMessageRes* response);
    // GET
    virtual ::grpc::Status GetUserInfo(::grpc::ServerContext* context, const ::MC::Msg::GetUserInfoReq* request, ::MC::Msg::GetUserInfoRes* response);
    virtual ::grpc::Status GetFriends(::grpc::ServerContext* context, const ::MC::Msg::UserID* request, ::MC::Msg::UserIDList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Msg::UpdateUserInfoReq* /*request*/, ::MC::Msg::UpdateUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserInfo(::grpc::ServerContext* context, ::MC::Msg::UpdateUserInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::MC::Msg::UpdateUserInfoRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUserHead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUserHead() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateUserHead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserHead(::grpc::ServerContext* /*context*/, const ::MC::Msg::UpdateUserHeadReq* /*request*/, ::MC::Msg::UpdateUserHeadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserHead(::grpc::ServerContext* context, ::MC::Msg::UpdateUserHeadReq* request, ::grpc::ServerAsyncResponseWriter< ::MC::Msg::UpdateUserHeadRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessageToServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessageToServer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendMessageToServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageToServer(::grpc::ServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessageToServer(::grpc::ServerContext* context, ::MC::Msg::SendMessageReq* request, ::grpc::ServerAsyncResponseWriter< ::MC::Msg::SendMessageRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Msg::GetUserInfoReq* /*request*/, ::MC::Msg::GetUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserInfo(::grpc::ServerContext* context, ::MC::Msg::GetUserInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::MC::Msg::GetUserInfoRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFriends() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFriends(::grpc::ServerContext* /*context*/, const ::MC::Msg::UserID* /*request*/, ::MC::Msg::UserIDList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFriends(::grpc::ServerContext* context, ::MC::Msg::UserID* request, ::grpc::ServerAsyncResponseWriter< ::MC::Msg::UserIDList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UpdateUserInfo<WithAsyncMethod_UpdateUserHead<WithAsyncMethod_SendMessageToServer<WithAsyncMethod_GetUserInfo<WithAsyncMethod_GetFriends<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MC::Msg::UpdateUserInfoReq, ::MC::Msg::UpdateUserInfoRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MC::Msg::UpdateUserInfoReq* request, ::MC::Msg::UpdateUserInfoRes* response) { return this->UpdateUserInfo(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUserInfo(
        ::grpc::MessageAllocator< ::MC::Msg::UpdateUserInfoReq, ::MC::Msg::UpdateUserInfoRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MC::Msg::UpdateUserInfoReq, ::MC::Msg::UpdateUserInfoRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Msg::UpdateUserInfoReq* /*request*/, ::MC::Msg::UpdateUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::MC::Msg::UpdateUserInfoReq* /*request*/, ::MC::Msg::UpdateUserInfoRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateUserHead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateUserHead() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::MC::Msg::UpdateUserHeadReq, ::MC::Msg::UpdateUserHeadRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MC::Msg::UpdateUserHeadReq* request, ::MC::Msg::UpdateUserHeadRes* response) { return this->UpdateUserHead(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUserHead(
        ::grpc::MessageAllocator< ::MC::Msg::UpdateUserHeadReq, ::MC::Msg::UpdateUserHeadRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MC::Msg::UpdateUserHeadReq, ::MC::Msg::UpdateUserHeadRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateUserHead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserHead(::grpc::ServerContext* /*context*/, const ::MC::Msg::UpdateUserHeadReq* /*request*/, ::MC::Msg::UpdateUserHeadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserHead(
      ::grpc::CallbackServerContext* /*context*/, const ::MC::Msg::UpdateUserHeadReq* /*request*/, ::MC::Msg::UpdateUserHeadRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendMessageToServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessageToServer() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::MC::Msg::SendMessageReq, ::MC::Msg::SendMessageRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MC::Msg::SendMessageReq* request, ::MC::Msg::SendMessageRes* response) { return this->SendMessageToServer(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessageToServer(
        ::grpc::MessageAllocator< ::MC::Msg::SendMessageReq, ::MC::Msg::SendMessageRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MC::Msg::SendMessageReq, ::MC::Msg::SendMessageRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMessageToServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageToServer(::grpc::ServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessageToServer(
      ::grpc::CallbackServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUserInfo() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::MC::Msg::GetUserInfoReq, ::MC::Msg::GetUserInfoRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MC::Msg::GetUserInfoReq* request, ::MC::Msg::GetUserInfoRes* response) { return this->GetUserInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserInfo(
        ::grpc::MessageAllocator< ::MC::Msg::GetUserInfoReq, ::MC::Msg::GetUserInfoRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MC::Msg::GetUserInfoReq, ::MC::Msg::GetUserInfoRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Msg::GetUserInfoReq* /*request*/, ::MC::Msg::GetUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::MC::Msg::GetUserInfoReq* /*request*/, ::MC::Msg::GetUserInfoRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFriends() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::MC::Msg::UserID, ::MC::Msg::UserIDList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MC::Msg::UserID* request, ::MC::Msg::UserIDList* response) { return this->GetFriends(context, request, response); }));}
    void SetMessageAllocatorFor_GetFriends(
        ::grpc::MessageAllocator< ::MC::Msg::UserID, ::MC::Msg::UserIDList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MC::Msg::UserID, ::MC::Msg::UserIDList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFriends(::grpc::ServerContext* /*context*/, const ::MC::Msg::UserID* /*request*/, ::MC::Msg::UserIDList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFriends(
      ::grpc::CallbackServerContext* /*context*/, const ::MC::Msg::UserID* /*request*/, ::MC::Msg::UserIDList* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UpdateUserInfo<WithCallbackMethod_UpdateUserHead<WithCallbackMethod_SendMessageToServer<WithCallbackMethod_GetUserInfo<WithCallbackMethod_GetFriends<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Msg::UpdateUserInfoReq* /*request*/, ::MC::Msg::UpdateUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUserHead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUserHead() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateUserHead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserHead(::grpc::ServerContext* /*context*/, const ::MC::Msg::UpdateUserHeadReq* /*request*/, ::MC::Msg::UpdateUserHeadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendMessageToServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessageToServer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendMessageToServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageToServer(::grpc::ServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Msg::GetUserInfoReq* /*request*/, ::MC::Msg::GetUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFriends() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFriends(::grpc::ServerContext* /*context*/, const ::MC::Msg::UserID* /*request*/, ::MC::Msg::UserIDList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Msg::UpdateUserInfoReq* /*request*/, ::MC::Msg::UpdateUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUserHead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUserHead() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateUserHead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserHead(::grpc::ServerContext* /*context*/, const ::MC::Msg::UpdateUserHeadReq* /*request*/, ::MC::Msg::UpdateUserHeadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserHead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessageToServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessageToServer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendMessageToServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageToServer(::grpc::ServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessageToServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserInfo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Msg::GetUserInfoReq* /*request*/, ::MC::Msg::GetUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFriends() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFriends(::grpc::ServerContext* /*context*/, const ::MC::Msg::UserID* /*request*/, ::MC::Msg::UserIDList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFriends(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUserInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Msg::UpdateUserInfoReq* /*request*/, ::MC::Msg::UpdateUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateUserHead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateUserHead() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUserHead(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateUserHead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserHead(::grpc::ServerContext* /*context*/, const ::MC::Msg::UpdateUserHeadReq* /*request*/, ::MC::Msg::UpdateUserHeadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserHead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessageToServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessageToServer() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessageToServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMessageToServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageToServer(::grpc::ServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessageToServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUserInfo() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Msg::GetUserInfoReq* /*request*/, ::MC::Msg::GetUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFriends() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFriends(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFriends(::grpc::ServerContext* /*context*/, const ::MC::Msg::UserID* /*request*/, ::MC::Msg::UserIDList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFriends(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MC::Msg::UpdateUserInfoReq, ::MC::Msg::UpdateUserInfoRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MC::Msg::UpdateUserInfoReq, ::MC::Msg::UpdateUserInfoRes>* streamer) {
                       return this->StreamedUpdateUserInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Msg::UpdateUserInfoReq* /*request*/, ::MC::Msg::UpdateUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUserInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MC::Msg::UpdateUserInfoReq,::MC::Msg::UpdateUserInfoRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUserHead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUserHead() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MC::Msg::UpdateUserHeadReq, ::MC::Msg::UpdateUserHeadRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MC::Msg::UpdateUserHeadReq, ::MC::Msg::UpdateUserHeadRes>* streamer) {
                       return this->StreamedUpdateUserHead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUserHead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUserHead(::grpc::ServerContext* /*context*/, const ::MC::Msg::UpdateUserHeadReq* /*request*/, ::MC::Msg::UpdateUserHeadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUserHead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MC::Msg::UpdateUserHeadReq,::MC::Msg::UpdateUserHeadRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessageToServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessageToServer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MC::Msg::SendMessageReq, ::MC::Msg::SendMessageRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MC::Msg::SendMessageReq, ::MC::Msg::SendMessageRes>* streamer) {
                       return this->StreamedSendMessageToServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessageToServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessageToServer(::grpc::ServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessageToServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MC::Msg::SendMessageReq,::MC::Msg::SendMessageRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MC::Msg::GetUserInfoReq, ::MC::Msg::GetUserInfoRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MC::Msg::GetUserInfoReq, ::MC::Msg::GetUserInfoRes>* streamer) {
                       return this->StreamedGetUserInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Msg::GetUserInfoReq* /*request*/, ::MC::Msg::GetUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MC::Msg::GetUserInfoReq,::MC::Msg::GetUserInfoRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFriends() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MC::Msg::UserID, ::MC::Msg::UserIDList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MC::Msg::UserID, ::MC::Msg::UserIDList>* streamer) {
                       return this->StreamedGetFriends(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFriends(::grpc::ServerContext* /*context*/, const ::MC::Msg::UserID* /*request*/, ::MC::Msg::UserIDList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFriends(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MC::Msg::UserID,::MC::Msg::UserIDList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UpdateUserInfo<WithStreamedUnaryMethod_UpdateUserHead<WithStreamedUnaryMethod_SendMessageToServer<WithStreamedUnaryMethod_GetUserInfo<WithStreamedUnaryMethod_GetFriends<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UpdateUserInfo<WithStreamedUnaryMethod_UpdateUserHead<WithStreamedUnaryMethod_SendMessageToServer<WithStreamedUnaryMethod_GetUserInfo<WithStreamedUnaryMethod_GetFriends<Service > > > > > StreamedService;
};

class Client final {
 public:
  static constexpr char const* service_full_name() {
    return "MC.Msg.Client";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendMessageToClient(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::MC::Msg::SendMessageRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::SendMessageRes>> AsyncSendMessageToClient(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::SendMessageRes>>(AsyncSendMessageToClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::SendMessageRes>> PrepareAsyncSendMessageToClient(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::SendMessageRes>>(PrepareAsyncSendMessageToClientRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SendMessageToClient(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq* request, ::MC::Msg::SendMessageRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessageToClient(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq* request, ::MC::Msg::SendMessageRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::SendMessageRes>* AsyncSendMessageToClientRaw(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Msg::SendMessageRes>* PrepareAsyncSendMessageToClientRaw(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendMessageToClient(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::MC::Msg::SendMessageRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::SendMessageRes>> AsyncSendMessageToClient(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::SendMessageRes>>(AsyncSendMessageToClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::SendMessageRes>> PrepareAsyncSendMessageToClient(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Msg::SendMessageRes>>(PrepareAsyncSendMessageToClientRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendMessageToClient(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq* request, ::MC::Msg::SendMessageRes* response, std::function<void(::grpc::Status)>) override;
      void SendMessageToClient(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq* request, ::MC::Msg::SendMessageRes* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MC::Msg::SendMessageRes>* AsyncSendMessageToClientRaw(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Msg::SendMessageRes>* PrepareAsyncSendMessageToClientRaw(::grpc::ClientContext* context, const ::MC::Msg::SendMessageReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessageToClient_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendMessageToClient(::grpc::ServerContext* context, const ::MC::Msg::SendMessageReq* request, ::MC::Msg::SendMessageRes* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessageToClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessageToClient() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendMessageToClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageToClient(::grpc::ServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessageToClient(::grpc::ServerContext* context, ::MC::Msg::SendMessageReq* request, ::grpc::ServerAsyncResponseWriter< ::MC::Msg::SendMessageRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendMessageToClient<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendMessageToClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessageToClient() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MC::Msg::SendMessageReq, ::MC::Msg::SendMessageRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MC::Msg::SendMessageReq* request, ::MC::Msg::SendMessageRes* response) { return this->SendMessageToClient(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessageToClient(
        ::grpc::MessageAllocator< ::MC::Msg::SendMessageReq, ::MC::Msg::SendMessageRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MC::Msg::SendMessageReq, ::MC::Msg::SendMessageRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMessageToClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageToClient(::grpc::ServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessageToClient(
      ::grpc::CallbackServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendMessageToClient<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendMessageToClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessageToClient() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendMessageToClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageToClient(::grpc::ServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessageToClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessageToClient() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendMessageToClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageToClient(::grpc::ServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessageToClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessageToClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessageToClient() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessageToClient(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMessageToClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessageToClient(::grpc::ServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessageToClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessageToClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessageToClient() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MC::Msg::SendMessageReq, ::MC::Msg::SendMessageRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MC::Msg::SendMessageReq, ::MC::Msg::SendMessageRes>* streamer) {
                       return this->StreamedSendMessageToClient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessageToClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessageToClient(::grpc::ServerContext* /*context*/, const ::MC::Msg::SendMessageReq* /*request*/, ::MC::Msg::SendMessageRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessageToClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MC::Msg::SendMessageReq,::MC::Msg::SendMessageRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendMessageToClient<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendMessageToClient<Service > StreamedService;
};

}  // namespace Msg
}  // namespace MC


#endif  // GRPC_MC_2eMsg_2eproto__INCLUDED
