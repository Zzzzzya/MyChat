// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MC.Data.proto
#ifndef GRPC_MC_2eData_2eproto__INCLUDED
#define GRPC_MC_2eData_2eproto__INCLUDED

#include "MC.Data.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace MC {
namespace Data {

class MCData final {
 public:
  static constexpr char const* service_full_name() {
    return "MC.Data.MCData";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetUserPassword(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest& request, ::MC::Data::MCDataUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserResponse>> AsyncGetUserPassword(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserResponse>>(AsyncGetUserPasswordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserResponse>> PrepareAsyncGetUserPassword(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserResponse>>(PrepareAsyncGetUserPasswordRaw(context, request, cq));
    }
    virtual ::grpc::Status TryRegist(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest& request, ::MC::Data::MCDataRegistResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataRegistResponse>> AsyncTryRegist(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataRegistResponse>>(AsyncTryRegistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataRegistResponse>> PrepareAsyncTryRegist(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataRegistResponse>>(PrepareAsyncTryRegistRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUserFriends(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest& request, ::MC::Data::MCDataUserFriendsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserFriendsResponse>> AsyncGetUserFriends(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserFriendsResponse>>(AsyncGetUserFriendsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserFriendsResponse>> PrepareAsyncGetUserFriends(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserFriendsResponse>>(PrepareAsyncGetUserFriendsRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUserInfo(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq& request, ::MC::Data::MCDataUserInfoRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserInfoRes>> AsyncUpdateUserInfo(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserInfoRes>>(AsyncUpdateUserInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserInfoRes>> PrepareAsyncUpdateUserInfo(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserInfoRes>>(PrepareAsyncUpdateUserInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUserHead(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq& request, ::MC::Data::MCDataUserHeadRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserHeadRes>> AsyncUpdateUserHead(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserHeadRes>>(AsyncUpdateUserHeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserHeadRes>> PrepareAsyncUpdateUserHead(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserHeadRes>>(PrepareAsyncUpdateUserHeadRaw(context, request, cq));
    }
    virtual ::grpc::Status AddFriend(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq& request, ::MC::Data::MCDataAddFriendRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataAddFriendRes>> AsyncAddFriend(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataAddFriendRes>>(AsyncAddFriendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataAddFriendRes>> PrepareAsyncAddFriend(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataAddFriendRes>>(PrepareAsyncAddFriendRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetUserPassword(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest* request, ::MC::Data::MCDataUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserPassword(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest* request, ::MC::Data::MCDataUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TryRegist(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest* request, ::MC::Data::MCDataRegistResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TryRegist(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest* request, ::MC::Data::MCDataRegistResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetUserFriends(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest* request, ::MC::Data::MCDataUserFriendsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserFriends(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest* request, ::MC::Data::MCDataUserFriendsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateUserInfo(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq* request, ::MC::Data::MCDataUserInfoRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUserInfo(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq* request, ::MC::Data::MCDataUserInfoRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateUserHead(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq* request, ::MC::Data::MCDataUserHeadRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUserHead(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq* request, ::MC::Data::MCDataUserHeadRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddFriend(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq* request, ::MC::Data::MCDataAddFriendRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddFriend(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq* request, ::MC::Data::MCDataAddFriendRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserResponse>* AsyncGetUserPasswordRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserResponse>* PrepareAsyncGetUserPasswordRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataRegistResponse>* AsyncTryRegistRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataRegistResponse>* PrepareAsyncTryRegistRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserFriendsResponse>* AsyncGetUserFriendsRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserFriendsResponse>* PrepareAsyncGetUserFriendsRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserInfoRes>* AsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserInfoRes>* PrepareAsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserHeadRes>* AsyncUpdateUserHeadRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataUserHeadRes>* PrepareAsyncUpdateUserHeadRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataAddFriendRes>* AsyncAddFriendRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MC::Data::MCDataAddFriendRes>* PrepareAsyncAddFriendRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetUserPassword(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest& request, ::MC::Data::MCDataUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserResponse>> AsyncGetUserPassword(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserResponse>>(AsyncGetUserPasswordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserResponse>> PrepareAsyncGetUserPassword(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserResponse>>(PrepareAsyncGetUserPasswordRaw(context, request, cq));
    }
    ::grpc::Status TryRegist(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest& request, ::MC::Data::MCDataRegistResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataRegistResponse>> AsyncTryRegist(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataRegistResponse>>(AsyncTryRegistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataRegistResponse>> PrepareAsyncTryRegist(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataRegistResponse>>(PrepareAsyncTryRegistRaw(context, request, cq));
    }
    ::grpc::Status GetUserFriends(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest& request, ::MC::Data::MCDataUserFriendsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserFriendsResponse>> AsyncGetUserFriends(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserFriendsResponse>>(AsyncGetUserFriendsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserFriendsResponse>> PrepareAsyncGetUserFriends(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserFriendsResponse>>(PrepareAsyncGetUserFriendsRaw(context, request, cq));
    }
    ::grpc::Status UpdateUserInfo(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq& request, ::MC::Data::MCDataUserInfoRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserInfoRes>> AsyncUpdateUserInfo(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserInfoRes>>(AsyncUpdateUserInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserInfoRes>> PrepareAsyncUpdateUserInfo(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserInfoRes>>(PrepareAsyncUpdateUserInfoRaw(context, request, cq));
    }
    ::grpc::Status UpdateUserHead(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq& request, ::MC::Data::MCDataUserHeadRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserHeadRes>> AsyncUpdateUserHead(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserHeadRes>>(AsyncUpdateUserHeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserHeadRes>> PrepareAsyncUpdateUserHead(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserHeadRes>>(PrepareAsyncUpdateUserHeadRaw(context, request, cq));
    }
    ::grpc::Status AddFriend(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq& request, ::MC::Data::MCDataAddFriendRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataAddFriendRes>> AsyncAddFriend(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataAddFriendRes>>(AsyncAddFriendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataAddFriendRes>> PrepareAsyncAddFriend(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataAddFriendRes>>(PrepareAsyncAddFriendRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetUserPassword(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest* request, ::MC::Data::MCDataUserResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUserPassword(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest* request, ::MC::Data::MCDataUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TryRegist(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest* request, ::MC::Data::MCDataRegistResponse* response, std::function<void(::grpc::Status)>) override;
      void TryRegist(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest* request, ::MC::Data::MCDataRegistResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUserFriends(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest* request, ::MC::Data::MCDataUserFriendsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUserFriends(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest* request, ::MC::Data::MCDataUserFriendsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateUserInfo(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq* request, ::MC::Data::MCDataUserInfoRes* response, std::function<void(::grpc::Status)>) override;
      void UpdateUserInfo(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq* request, ::MC::Data::MCDataUserInfoRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateUserHead(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq* request, ::MC::Data::MCDataUserHeadRes* response, std::function<void(::grpc::Status)>) override;
      void UpdateUserHead(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq* request, ::MC::Data::MCDataUserHeadRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddFriend(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq* request, ::MC::Data::MCDataAddFriendRes* response, std::function<void(::grpc::Status)>) override;
      void AddFriend(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq* request, ::MC::Data::MCDataAddFriendRes* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserResponse>* AsyncGetUserPasswordRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserResponse>* PrepareAsyncGetUserPasswordRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataRegistResponse>* AsyncTryRegistRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataRegistResponse>* PrepareAsyncTryRegistRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataRegistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserFriendsResponse>* AsyncGetUserFriendsRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserFriendsResponse>* PrepareAsyncGetUserFriendsRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserInfoRes>* AsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserInfoRes>* PrepareAsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserHeadRes>* AsyncUpdateUserHeadRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataUserHeadRes>* PrepareAsyncUpdateUserHeadRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataUserHeadReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataAddFriendRes>* AsyncAddFriendRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MC::Data::MCDataAddFriendRes>* PrepareAsyncAddFriendRaw(::grpc::ClientContext* context, const ::MC::Data::MCDataAddFriendReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserPassword_;
    const ::grpc::internal::RpcMethod rpcmethod_TryRegist_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserFriends_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUserInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUserHead_;
    const ::grpc::internal::RpcMethod rpcmethod_AddFriend_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetUserPassword(::grpc::ServerContext* context, const ::MC::Data::MCDataUserRequest* request, ::MC::Data::MCDataUserResponse* response);
    virtual ::grpc::Status TryRegist(::grpc::ServerContext* context, const ::MC::Data::MCDataRegistRequest* request, ::MC::Data::MCDataRegistResponse* response);
    virtual ::grpc::Status GetUserFriends(::grpc::ServerContext* context, const ::MC::Data::MCDataUserIDRequest* request, ::MC::Data::MCDataUserFriendsResponse* response);
    virtual ::grpc::Status UpdateUserInfo(::grpc::ServerContext* context, const ::MC::Data::MCDataUserInfoReq* request, ::MC::Data::MCDataUserInfoRes* response);
    virtual ::grpc::Status UpdateUserHead(::grpc::ServerContext* context, const ::MC::Data::MCDataUserHeadReq* request, ::MC::Data::MCDataUserHeadRes* response);
    virtual ::grpc::Status AddFriend(::grpc::ServerContext* context, const ::MC::Data::MCDataAddFriendReq* request, ::MC::Data::MCDataAddFriendRes* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserPassword() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetUserPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserPassword(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserRequest* /*request*/, ::MC::Data::MCDataUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserPassword(::grpc::ServerContext* context, ::MC::Data::MCDataUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::MC::Data::MCDataUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TryRegist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TryRegist() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_TryRegist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryRegist(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataRegistRequest* /*request*/, ::MC::Data::MCDataRegistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTryRegist(::grpc::ServerContext* context, ::MC::Data::MCDataRegistRequest* request, ::grpc::ServerAsyncResponseWriter< ::MC::Data::MCDataRegistResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserFriends() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetUserFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFriends(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserIDRequest* /*request*/, ::MC::Data::MCDataUserFriendsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserFriends(::grpc::ServerContext* context, ::MC::Data::MCDataUserIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::MC::Data::MCDataUserFriendsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserInfoReq* /*request*/, ::MC::Data::MCDataUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserInfo(::grpc::ServerContext* context, ::MC::Data::MCDataUserInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::MC::Data::MCDataUserInfoRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUserHead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUserHead() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateUserHead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserHead(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserHeadReq* /*request*/, ::MC::Data::MCDataUserHeadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserHead(::grpc::ServerContext* context, ::MC::Data::MCDataUserHeadReq* request, ::grpc::ServerAsyncResponseWriter< ::MC::Data::MCDataUserHeadRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddFriend() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AddFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFriend(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataAddFriendReq* /*request*/, ::MC::Data::MCDataAddFriendRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFriend(::grpc::ServerContext* context, ::MC::Data::MCDataAddFriendReq* request, ::grpc::ServerAsyncResponseWriter< ::MC::Data::MCDataAddFriendRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetUserPassword<WithAsyncMethod_TryRegist<WithAsyncMethod_GetUserFriends<WithAsyncMethod_UpdateUserInfo<WithAsyncMethod_UpdateUserHead<WithAsyncMethod_AddFriend<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetUserPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUserPassword() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MC::Data::MCDataUserRequest, ::MC::Data::MCDataUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MC::Data::MCDataUserRequest* request, ::MC::Data::MCDataUserResponse* response) { return this->GetUserPassword(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserPassword(
        ::grpc::MessageAllocator< ::MC::Data::MCDataUserRequest, ::MC::Data::MCDataUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MC::Data::MCDataUserRequest, ::MC::Data::MCDataUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUserPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserPassword(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserRequest* /*request*/, ::MC::Data::MCDataUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserPassword(
      ::grpc::CallbackServerContext* /*context*/, const ::MC::Data::MCDataUserRequest* /*request*/, ::MC::Data::MCDataUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TryRegist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TryRegist() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::MC::Data::MCDataRegistRequest, ::MC::Data::MCDataRegistResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MC::Data::MCDataRegistRequest* request, ::MC::Data::MCDataRegistResponse* response) { return this->TryRegist(context, request, response); }));}
    void SetMessageAllocatorFor_TryRegist(
        ::grpc::MessageAllocator< ::MC::Data::MCDataRegistRequest, ::MC::Data::MCDataRegistResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MC::Data::MCDataRegistRequest, ::MC::Data::MCDataRegistResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TryRegist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryRegist(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataRegistRequest* /*request*/, ::MC::Data::MCDataRegistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TryRegist(
      ::grpc::CallbackServerContext* /*context*/, const ::MC::Data::MCDataRegistRequest* /*request*/, ::MC::Data::MCDataRegistResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUserFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUserFriends() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::MC::Data::MCDataUserIDRequest, ::MC::Data::MCDataUserFriendsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MC::Data::MCDataUserIDRequest* request, ::MC::Data::MCDataUserFriendsResponse* response) { return this->GetUserFriends(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserFriends(
        ::grpc::MessageAllocator< ::MC::Data::MCDataUserIDRequest, ::MC::Data::MCDataUserFriendsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MC::Data::MCDataUserIDRequest, ::MC::Data::MCDataUserFriendsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUserFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFriends(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserIDRequest* /*request*/, ::MC::Data::MCDataUserFriendsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserFriends(
      ::grpc::CallbackServerContext* /*context*/, const ::MC::Data::MCDataUserIDRequest* /*request*/, ::MC::Data::MCDataUserFriendsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::MC::Data::MCDataUserInfoReq, ::MC::Data::MCDataUserInfoRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MC::Data::MCDataUserInfoReq* request, ::MC::Data::MCDataUserInfoRes* response) { return this->UpdateUserInfo(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUserInfo(
        ::grpc::MessageAllocator< ::MC::Data::MCDataUserInfoReq, ::MC::Data::MCDataUserInfoRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MC::Data::MCDataUserInfoReq, ::MC::Data::MCDataUserInfoRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserInfoReq* /*request*/, ::MC::Data::MCDataUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::MC::Data::MCDataUserInfoReq* /*request*/, ::MC::Data::MCDataUserInfoRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateUserHead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateUserHead() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::MC::Data::MCDataUserHeadReq, ::MC::Data::MCDataUserHeadRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MC::Data::MCDataUserHeadReq* request, ::MC::Data::MCDataUserHeadRes* response) { return this->UpdateUserHead(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUserHead(
        ::grpc::MessageAllocator< ::MC::Data::MCDataUserHeadReq, ::MC::Data::MCDataUserHeadRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MC::Data::MCDataUserHeadReq, ::MC::Data::MCDataUserHeadRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateUserHead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserHead(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserHeadReq* /*request*/, ::MC::Data::MCDataUserHeadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserHead(
      ::grpc::CallbackServerContext* /*context*/, const ::MC::Data::MCDataUserHeadReq* /*request*/, ::MC::Data::MCDataUserHeadRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddFriend() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::MC::Data::MCDataAddFriendReq, ::MC::Data::MCDataAddFriendRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MC::Data::MCDataAddFriendReq* request, ::MC::Data::MCDataAddFriendRes* response) { return this->AddFriend(context, request, response); }));}
    void SetMessageAllocatorFor_AddFriend(
        ::grpc::MessageAllocator< ::MC::Data::MCDataAddFriendReq, ::MC::Data::MCDataAddFriendRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MC::Data::MCDataAddFriendReq, ::MC::Data::MCDataAddFriendRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFriend(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataAddFriendReq* /*request*/, ::MC::Data::MCDataAddFriendRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddFriend(
      ::grpc::CallbackServerContext* /*context*/, const ::MC::Data::MCDataAddFriendReq* /*request*/, ::MC::Data::MCDataAddFriendRes* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetUserPassword<WithCallbackMethod_TryRegist<WithCallbackMethod_GetUserFriends<WithCallbackMethod_UpdateUserInfo<WithCallbackMethod_UpdateUserHead<WithCallbackMethod_AddFriend<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetUserPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserPassword() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetUserPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserPassword(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserRequest* /*request*/, ::MC::Data::MCDataUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TryRegist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TryRegist() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_TryRegist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryRegist(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataRegistRequest* /*request*/, ::MC::Data::MCDataRegistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserFriends() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetUserFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFriends(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserIDRequest* /*request*/, ::MC::Data::MCDataUserFriendsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserInfoReq* /*request*/, ::MC::Data::MCDataUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUserHead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUserHead() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateUserHead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserHead(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserHeadReq* /*request*/, ::MC::Data::MCDataUserHeadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddFriend() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AddFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFriend(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataAddFriendReq* /*request*/, ::MC::Data::MCDataAddFriendRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserPassword() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetUserPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserPassword(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserRequest* /*request*/, ::MC::Data::MCDataUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserPassword(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TryRegist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TryRegist() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_TryRegist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryRegist(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataRegistRequest* /*request*/, ::MC::Data::MCDataRegistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTryRegist(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserFriends() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetUserFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFriends(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserIDRequest* /*request*/, ::MC::Data::MCDataUserFriendsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserFriends(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserInfoReq* /*request*/, ::MC::Data::MCDataUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUserHead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUserHead() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateUserHead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserHead(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserHeadReq* /*request*/, ::MC::Data::MCDataUserHeadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserHead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddFriend() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AddFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFriend(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataAddFriendReq* /*request*/, ::MC::Data::MCDataAddFriendRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFriend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUserPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUserPassword() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserPassword(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUserPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserPassword(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserRequest* /*request*/, ::MC::Data::MCDataUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserPassword(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TryRegist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TryRegist() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TryRegist(context, request, response); }));
    }
    ~WithRawCallbackMethod_TryRegist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryRegist(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataRegistRequest* /*request*/, ::MC::Data::MCDataRegistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TryRegist(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUserFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUserFriends() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserFriends(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUserFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFriends(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserIDRequest* /*request*/, ::MC::Data::MCDataUserFriendsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserFriends(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUserInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserInfoReq* /*request*/, ::MC::Data::MCDataUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateUserHead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateUserHead() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUserHead(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateUserHead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserHead(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserHeadReq* /*request*/, ::MC::Data::MCDataUserHeadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserHead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddFriend() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddFriend(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFriend(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataAddFriendReq* /*request*/, ::MC::Data::MCDataAddFriendRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddFriend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserPassword() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MC::Data::MCDataUserRequest, ::MC::Data::MCDataUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MC::Data::MCDataUserRequest, ::MC::Data::MCDataUserResponse>* streamer) {
                       return this->StreamedGetUserPassword(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUserPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserPassword(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserRequest* /*request*/, ::MC::Data::MCDataUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserPassword(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MC::Data::MCDataUserRequest,::MC::Data::MCDataUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TryRegist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TryRegist() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MC::Data::MCDataRegistRequest, ::MC::Data::MCDataRegistResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MC::Data::MCDataRegistRequest, ::MC::Data::MCDataRegistResponse>* streamer) {
                       return this->StreamedTryRegist(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TryRegist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TryRegist(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataRegistRequest* /*request*/, ::MC::Data::MCDataRegistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTryRegist(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MC::Data::MCDataRegistRequest,::MC::Data::MCDataRegistResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserFriends() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MC::Data::MCDataUserIDRequest, ::MC::Data::MCDataUserFriendsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MC::Data::MCDataUserIDRequest, ::MC::Data::MCDataUserFriendsResponse>* streamer) {
                       return this->StreamedGetUserFriends(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUserFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserFriends(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserIDRequest* /*request*/, ::MC::Data::MCDataUserFriendsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserFriends(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MC::Data::MCDataUserIDRequest,::MC::Data::MCDataUserFriendsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MC::Data::MCDataUserInfoReq, ::MC::Data::MCDataUserInfoRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MC::Data::MCDataUserInfoReq, ::MC::Data::MCDataUserInfoRes>* streamer) {
                       return this->StreamedUpdateUserInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserInfoReq* /*request*/, ::MC::Data::MCDataUserInfoRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUserInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MC::Data::MCDataUserInfoReq,::MC::Data::MCDataUserInfoRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUserHead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUserHead() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MC::Data::MCDataUserHeadReq, ::MC::Data::MCDataUserHeadRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MC::Data::MCDataUserHeadReq, ::MC::Data::MCDataUserHeadRes>* streamer) {
                       return this->StreamedUpdateUserHead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUserHead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUserHead(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataUserHeadReq* /*request*/, ::MC::Data::MCDataUserHeadRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUserHead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MC::Data::MCDataUserHeadReq,::MC::Data::MCDataUserHeadRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddFriend() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MC::Data::MCDataAddFriendReq, ::MC::Data::MCDataAddFriendRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MC::Data::MCDataAddFriendReq, ::MC::Data::MCDataAddFriendRes>* streamer) {
                       return this->StreamedAddFriend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddFriend(::grpc::ServerContext* /*context*/, const ::MC::Data::MCDataAddFriendReq* /*request*/, ::MC::Data::MCDataAddFriendRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddFriend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MC::Data::MCDataAddFriendReq,::MC::Data::MCDataAddFriendRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetUserPassword<WithStreamedUnaryMethod_TryRegist<WithStreamedUnaryMethod_GetUserFriends<WithStreamedUnaryMethod_UpdateUserInfo<WithStreamedUnaryMethod_UpdateUserHead<WithStreamedUnaryMethod_AddFriend<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetUserPassword<WithStreamedUnaryMethod_TryRegist<WithStreamedUnaryMethod_GetUserFriends<WithStreamedUnaryMethod_UpdateUserInfo<WithStreamedUnaryMethod_UpdateUserHead<WithStreamedUnaryMethod_AddFriend<Service > > > > > > StreamedService;
};

}  // namespace Data
}  // namespace MC


#endif  // GRPC_MC_2eData_2eproto__INCLUDED
