// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MC.Data.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_MC_2eData_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_MC_2eData_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_MC_2eData_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_MC_2eData_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_MC_2eData_2eproto;
namespace MC {
namespace Data {
class Friend;
struct FriendDefaultTypeInternal;
extern FriendDefaultTypeInternal _Friend_default_instance_;
class MCDataRegistRequest;
struct MCDataRegistRequestDefaultTypeInternal;
extern MCDataRegistRequestDefaultTypeInternal _MCDataRegistRequest_default_instance_;
class MCDataRegistResponse;
struct MCDataRegistResponseDefaultTypeInternal;
extern MCDataRegistResponseDefaultTypeInternal _MCDataRegistResponse_default_instance_;
class MCDataUserFriendsResponse;
struct MCDataUserFriendsResponseDefaultTypeInternal;
extern MCDataUserFriendsResponseDefaultTypeInternal _MCDataUserFriendsResponse_default_instance_;
class MCDataUserIDRequest;
struct MCDataUserIDRequestDefaultTypeInternal;
extern MCDataUserIDRequestDefaultTypeInternal _MCDataUserIDRequest_default_instance_;
class MCDataUserRequest;
struct MCDataUserRequestDefaultTypeInternal;
extern MCDataUserRequestDefaultTypeInternal _MCDataUserRequest_default_instance_;
class MCDataUserResponse;
struct MCDataUserResponseDefaultTypeInternal;
extern MCDataUserResponseDefaultTypeInternal _MCDataUserResponse_default_instance_;
}  // namespace Data
}  // namespace MC
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace MC {
namespace Data {
enum MCDataResponseStatusCode : int {
  OK = 0,
  FAILED = 1,
  ERROR = 2,
  DATABASE_ERROR = 3,
  MCDataResponseStatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MCDataResponseStatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MCDataResponseStatusCode_IsValid(int value);
extern const uint32_t MCDataResponseStatusCode_internal_data_[];
constexpr MCDataResponseStatusCode MCDataResponseStatusCode_MIN = static_cast<MCDataResponseStatusCode>(0);
constexpr MCDataResponseStatusCode MCDataResponseStatusCode_MAX = static_cast<MCDataResponseStatusCode>(3);
constexpr int MCDataResponseStatusCode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
MCDataResponseStatusCode_descriptor();
template <typename T>
const std::string& MCDataResponseStatusCode_Name(T value) {
  static_assert(std::is_same<T, MCDataResponseStatusCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MCDataResponseStatusCode_Name().");
  return MCDataResponseStatusCode_Name(static_cast<MCDataResponseStatusCode>(value));
}
template <>
inline const std::string& MCDataResponseStatusCode_Name(MCDataResponseStatusCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MCDataResponseStatusCode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool MCDataResponseStatusCode_Parse(absl::string_view name, MCDataResponseStatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MCDataResponseStatusCode>(
      MCDataResponseStatusCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MCDataUserResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Data.MCDataUserResponse) */ {
 public:
  inline MCDataUserResponse() : MCDataUserResponse(nullptr) {}
  ~MCDataUserResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MCDataUserResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MCDataUserResponse(const MCDataUserResponse& from) : MCDataUserResponse(nullptr, from) {}
  inline MCDataUserResponse(MCDataUserResponse&& from) noexcept
      : MCDataUserResponse(nullptr, std::move(from)) {}
  inline MCDataUserResponse& operator=(const MCDataUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MCDataUserResponse& operator=(MCDataUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MCDataUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MCDataUserResponse* internal_default_instance() {
    return reinterpret_cast<const MCDataUserResponse*>(
        &_MCDataUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(MCDataUserResponse& a, MCDataUserResponse& b) { a.Swap(&b); }
  inline void Swap(MCDataUserResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MCDataUserResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MCDataUserResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MCDataUserResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MCDataUserResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MCDataUserResponse& from) { MCDataUserResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MCDataUserResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Data.MCDataUserResponse"; }

 protected:
  explicit MCDataUserResponse(::google::protobuf::Arena* arena);
  MCDataUserResponse(::google::protobuf::Arena* arena, const MCDataUserResponse& from);
  MCDataUserResponse(::google::protobuf::Arena* arena, MCDataUserResponse&& from) noexcept
      : MCDataUserResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPasswordFieldNumber = 2,
    kHxmFieldNumber = 3,
    kErrmsgFieldNumber = 4,
    kNicknameFieldNumber = 5,
    kSignatureFieldNumber = 7,
    kEmailFieldNumber = 8,
    kPhoneFieldNumber = 9,
    kBirthdayFieldNumber = 10,
    kCodeFieldNumber = 1,
    kGenderFieldNumber = 6,
    kUseridFieldNumber = 11,
  };
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string hxm = 3;
  void clear_hxm() ;
  const std::string& hxm() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hxm(Arg_&& arg, Args_... args);
  std::string* mutable_hxm();
  PROTOBUF_NODISCARD std::string* release_hxm();
  void set_allocated_hxm(std::string* value);

  private:
  const std::string& _internal_hxm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hxm(
      const std::string& value);
  std::string* _internal_mutable_hxm();

  public:
  // string errmsg = 4;
  void clear_errmsg() ;
  const std::string& errmsg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errmsg(Arg_&& arg, Args_... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* value);

  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(
      const std::string& value);
  std::string* _internal_mutable_errmsg();

  public:
  // string nickname = 5;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* value);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string signature = 7;
  void clear_signature() ;
  const std::string& signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* value);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // string email = 8;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string phone = 9;
  void clear_phone() ;
  const std::string& phone() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phone(Arg_&& arg, Args_... args);
  std::string* mutable_phone();
  PROTOBUF_NODISCARD std::string* release_phone();
  void set_allocated_phone(std::string* value);

  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(
      const std::string& value);
  std::string* _internal_mutable_phone();

  public:
  // string birthday = 10;
  void clear_birthday() ;
  const std::string& birthday() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_birthday(Arg_&& arg, Args_... args);
  std::string* mutable_birthday();
  PROTOBUF_NODISCARD std::string* release_birthday();
  void set_allocated_birthday(std::string* value);

  private:
  const std::string& _internal_birthday() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthday(
      const std::string& value);
  std::string* _internal_mutable_birthday();

  public:
  // .MC.Data.MCDataResponseStatusCode code = 1;
  void clear_code() ;
  ::MC::Data::MCDataResponseStatusCode code() const;
  void set_code(::MC::Data::MCDataResponseStatusCode value);

  private:
  ::MC::Data::MCDataResponseStatusCode _internal_code() const;
  void _internal_set_code(::MC::Data::MCDataResponseStatusCode value);

  public:
  // bool gender = 6;
  void clear_gender() ;
  bool gender() const;
  void set_gender(bool value);

  private:
  bool _internal_gender() const;
  void _internal_set_gender(bool value);

  public:
  // int32 userid = 11;
  void clear_userid() ;
  ::int32_t userid() const;
  void set_userid(::int32_t value);

  private:
  ::int32_t _internal_userid() const;
  void _internal_set_userid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Data.MCDataUserResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      95, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr hxm_;
    ::google::protobuf::internal::ArenaStringPtr errmsg_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr signature_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr phone_;
    ::google::protobuf::internal::ArenaStringPtr birthday_;
    int code_;
    bool gender_;
    ::int32_t userid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eData_2eproto;
};
// -------------------------------------------------------------------

class MCDataUserRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Data.MCDataUserRequest) */ {
 public:
  inline MCDataUserRequest() : MCDataUserRequest(nullptr) {}
  ~MCDataUserRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MCDataUserRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MCDataUserRequest(const MCDataUserRequest& from) : MCDataUserRequest(nullptr, from) {}
  inline MCDataUserRequest(MCDataUserRequest&& from) noexcept
      : MCDataUserRequest(nullptr, std::move(from)) {}
  inline MCDataUserRequest& operator=(const MCDataUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MCDataUserRequest& operator=(MCDataUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MCDataUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MCDataUserRequest* internal_default_instance() {
    return reinterpret_cast<const MCDataUserRequest*>(
        &_MCDataUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MCDataUserRequest& a, MCDataUserRequest& b) { a.Swap(&b); }
  inline void Swap(MCDataUserRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MCDataUserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MCDataUserRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MCDataUserRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MCDataUserRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MCDataUserRequest& from) { MCDataUserRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MCDataUserRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Data.MCDataUserRequest"; }

 protected:
  explicit MCDataUserRequest(::google::protobuf::Arena* arena);
  MCDataUserRequest(::google::protobuf::Arena* arena, const MCDataUserRequest& from);
  MCDataUserRequest(::google::protobuf::Arena* arena, MCDataUserRequest&& from) noexcept
      : MCDataUserRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // @@protoc_insertion_point(class_scope:MC.Data.MCDataUserRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr username_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eData_2eproto;
};
// -------------------------------------------------------------------

class MCDataUserIDRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Data.MCDataUserIDRequest) */ {
 public:
  inline MCDataUserIDRequest() : MCDataUserIDRequest(nullptr) {}
  ~MCDataUserIDRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MCDataUserIDRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MCDataUserIDRequest(const MCDataUserIDRequest& from) : MCDataUserIDRequest(nullptr, from) {}
  inline MCDataUserIDRequest(MCDataUserIDRequest&& from) noexcept
      : MCDataUserIDRequest(nullptr, std::move(from)) {}
  inline MCDataUserIDRequest& operator=(const MCDataUserIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MCDataUserIDRequest& operator=(MCDataUserIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MCDataUserIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MCDataUserIDRequest* internal_default_instance() {
    return reinterpret_cast<const MCDataUserIDRequest*>(
        &_MCDataUserIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MCDataUserIDRequest& a, MCDataUserIDRequest& b) { a.Swap(&b); }
  inline void Swap(MCDataUserIDRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MCDataUserIDRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MCDataUserIDRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MCDataUserIDRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MCDataUserIDRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MCDataUserIDRequest& from) { MCDataUserIDRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MCDataUserIDRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Data.MCDataUserIDRequest"; }

 protected:
  explicit MCDataUserIDRequest(::google::protobuf::Arena* arena);
  MCDataUserIDRequest(::google::protobuf::Arena* arena, const MCDataUserIDRequest& from);
  MCDataUserIDRequest(::google::protobuf::Arena* arena, MCDataUserIDRequest&& from) noexcept
      : MCDataUserIDRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid() ;
  ::int32_t userid() const;
  void set_userid(::int32_t value);

  private:
  ::int32_t _internal_userid() const;
  void _internal_set_userid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Data.MCDataUserIDRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t userid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eData_2eproto;
};
// -------------------------------------------------------------------

class MCDataRegistResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Data.MCDataRegistResponse) */ {
 public:
  inline MCDataRegistResponse() : MCDataRegistResponse(nullptr) {}
  ~MCDataRegistResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MCDataRegistResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MCDataRegistResponse(const MCDataRegistResponse& from) : MCDataRegistResponse(nullptr, from) {}
  inline MCDataRegistResponse(MCDataRegistResponse&& from) noexcept
      : MCDataRegistResponse(nullptr, std::move(from)) {}
  inline MCDataRegistResponse& operator=(const MCDataRegistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MCDataRegistResponse& operator=(MCDataRegistResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MCDataRegistResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MCDataRegistResponse* internal_default_instance() {
    return reinterpret_cast<const MCDataRegistResponse*>(
        &_MCDataRegistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(MCDataRegistResponse& a, MCDataRegistResponse& b) { a.Swap(&b); }
  inline void Swap(MCDataRegistResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MCDataRegistResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MCDataRegistResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MCDataRegistResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MCDataRegistResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MCDataRegistResponse& from) { MCDataRegistResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MCDataRegistResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Data.MCDataRegistResponse"; }

 protected:
  explicit MCDataRegistResponse(::google::protobuf::Arena* arena);
  MCDataRegistResponse(::google::protobuf::Arena* arena, const MCDataRegistResponse& from);
  MCDataRegistResponse(::google::protobuf::Arena* arena, MCDataRegistResponse&& from) noexcept
      : MCDataRegistResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrmsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string errmsg = 2;
  void clear_errmsg() ;
  const std::string& errmsg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errmsg(Arg_&& arg, Args_... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* value);

  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(
      const std::string& value);
  std::string* _internal_mutable_errmsg();

  public:
  // .MC.Data.MCDataResponseStatusCode code = 1;
  void clear_code() ;
  ::MC::Data::MCDataResponseStatusCode code() const;
  void set_code(::MC::Data::MCDataResponseStatusCode value);

  private:
  ::MC::Data::MCDataResponseStatusCode _internal_code() const;
  void _internal_set_code(::MC::Data::MCDataResponseStatusCode value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Data.MCDataRegistResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr errmsg_;
    int code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eData_2eproto;
};
// -------------------------------------------------------------------

class MCDataRegistRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Data.MCDataRegistRequest) */ {
 public:
  inline MCDataRegistRequest() : MCDataRegistRequest(nullptr) {}
  ~MCDataRegistRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MCDataRegistRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MCDataRegistRequest(const MCDataRegistRequest& from) : MCDataRegistRequest(nullptr, from) {}
  inline MCDataRegistRequest(MCDataRegistRequest&& from) noexcept
      : MCDataRegistRequest(nullptr, std::move(from)) {}
  inline MCDataRegistRequest& operator=(const MCDataRegistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MCDataRegistRequest& operator=(MCDataRegistRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MCDataRegistRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MCDataRegistRequest* internal_default_instance() {
    return reinterpret_cast<const MCDataRegistRequest*>(
        &_MCDataRegistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(MCDataRegistRequest& a, MCDataRegistRequest& b) { a.Swap(&b); }
  inline void Swap(MCDataRegistRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MCDataRegistRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MCDataRegistRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MCDataRegistRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MCDataRegistRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MCDataRegistRequest& from) { MCDataRegistRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MCDataRegistRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Data.MCDataRegistRequest"; }

 protected:
  explicit MCDataRegistRequest(::google::protobuf::Arena* arena);
  MCDataRegistRequest(::google::protobuf::Arena* arena, const MCDataRegistRequest& from);
  MCDataRegistRequest(::google::protobuf::Arena* arena, MCDataRegistRequest&& from) noexcept
      : MCDataRegistRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kNicknameFieldNumber = 3,
    kEmailFieldNumber = 4,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string nickname = 3;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* value);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string email = 4;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // @@protoc_insertion_point(class_scope:MC.Data.MCDataRegistRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eData_2eproto;
};
// -------------------------------------------------------------------

class Friend final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Data.Friend) */ {
 public:
  inline Friend() : Friend(nullptr) {}
  ~Friend() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Friend(
      ::google::protobuf::internal::ConstantInitialized);

  inline Friend(const Friend& from) : Friend(nullptr, from) {}
  inline Friend(Friend&& from) noexcept
      : Friend(nullptr, std::move(from)) {}
  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Friend& operator=(Friend&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Friend& default_instance() {
    return *internal_default_instance();
  }
  static inline const Friend* internal_default_instance() {
    return reinterpret_cast<const Friend*>(
        &_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Friend& a, Friend& b) { a.Swap(&b); }
  inline void Swap(Friend* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Friend* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Friend* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Friend>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Friend& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Friend& from) { Friend::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Friend* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Data.Friend"; }

 protected:
  explicit Friend(::google::protobuf::Arena* arena);
  Friend(::google::protobuf::Arena* arena, const Friend& from);
  Friend(::google::protobuf::Arena* arena, Friend&& from) noexcept
      : Friend(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFriendnameFieldNumber = 2,
    kFriendsignFieldNumber = 3,
    kLastcontacttimeFieldNumber = 4,
    kFriendidFieldNumber = 1,
  };
  // string friendname = 2;
  void clear_friendname() ;
  const std::string& friendname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_friendname(Arg_&& arg, Args_... args);
  std::string* mutable_friendname();
  PROTOBUF_NODISCARD std::string* release_friendname();
  void set_allocated_friendname(std::string* value);

  private:
  const std::string& _internal_friendname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendname(
      const std::string& value);
  std::string* _internal_mutable_friendname();

  public:
  // string friendsign = 3;
  void clear_friendsign() ;
  const std::string& friendsign() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_friendsign(Arg_&& arg, Args_... args);
  std::string* mutable_friendsign();
  PROTOBUF_NODISCARD std::string* release_friendsign();
  void set_allocated_friendsign(std::string* value);

  private:
  const std::string& _internal_friendsign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendsign(
      const std::string& value);
  std::string* _internal_mutable_friendsign();

  public:
  // string lastcontacttime = 4;
  void clear_lastcontacttime() ;
  const std::string& lastcontacttime() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lastcontacttime(Arg_&& arg, Args_... args);
  std::string* mutable_lastcontacttime();
  PROTOBUF_NODISCARD std::string* release_lastcontacttime();
  void set_allocated_lastcontacttime(std::string* value);

  private:
  const std::string& _internal_lastcontacttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastcontacttime(
      const std::string& value);
  std::string* _internal_mutable_lastcontacttime();

  public:
  // uint32 friendid = 1;
  void clear_friendid() ;
  ::uint32_t friendid() const;
  void set_friendid(::uint32_t value);

  private:
  ::uint32_t _internal_friendid() const;
  void _internal_set_friendid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Data.Friend)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr friendname_;
    ::google::protobuf::internal::ArenaStringPtr friendsign_;
    ::google::protobuf::internal::ArenaStringPtr lastcontacttime_;
    ::uint32_t friendid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eData_2eproto;
};
// -------------------------------------------------------------------

class MCDataUserFriendsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Data.MCDataUserFriendsResponse) */ {
 public:
  inline MCDataUserFriendsResponse() : MCDataUserFriendsResponse(nullptr) {}
  ~MCDataUserFriendsResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MCDataUserFriendsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MCDataUserFriendsResponse(const MCDataUserFriendsResponse& from) : MCDataUserFriendsResponse(nullptr, from) {}
  inline MCDataUserFriendsResponse(MCDataUserFriendsResponse&& from) noexcept
      : MCDataUserFriendsResponse(nullptr, std::move(from)) {}
  inline MCDataUserFriendsResponse& operator=(const MCDataUserFriendsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MCDataUserFriendsResponse& operator=(MCDataUserFriendsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MCDataUserFriendsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MCDataUserFriendsResponse* internal_default_instance() {
    return reinterpret_cast<const MCDataUserFriendsResponse*>(
        &_MCDataUserFriendsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MCDataUserFriendsResponse& a, MCDataUserFriendsResponse& b) { a.Swap(&b); }
  inline void Swap(MCDataUserFriendsResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MCDataUserFriendsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MCDataUserFriendsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MCDataUserFriendsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MCDataUserFriendsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MCDataUserFriendsResponse& from) { MCDataUserFriendsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MCDataUserFriendsResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Data.MCDataUserFriendsResponse"; }

 protected:
  explicit MCDataUserFriendsResponse(::google::protobuf::Arena* arena);
  MCDataUserFriendsResponse(::google::protobuf::Arena* arena, const MCDataUserFriendsResponse& from);
  MCDataUserFriendsResponse(::google::protobuf::Arena* arena, MCDataUserFriendsResponse&& from) noexcept
      : MCDataUserFriendsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFriendsFieldNumber = 3,
    kErrmsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .MC.Data.Friend friends = 3;
  int friends_size() const;
  private:
  int _internal_friends_size() const;

  public:
  void clear_friends() ;
  ::MC::Data::Friend* mutable_friends(int index);
  ::google::protobuf::RepeatedPtrField<::MC::Data::Friend>* mutable_friends();

  private:
  const ::google::protobuf::RepeatedPtrField<::MC::Data::Friend>& _internal_friends() const;
  ::google::protobuf::RepeatedPtrField<::MC::Data::Friend>* _internal_mutable_friends();
  public:
  const ::MC::Data::Friend& friends(int index) const;
  ::MC::Data::Friend* add_friends();
  const ::google::protobuf::RepeatedPtrField<::MC::Data::Friend>& friends() const;
  // string errmsg = 2;
  void clear_errmsg() ;
  const std::string& errmsg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errmsg(Arg_&& arg, Args_... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* value);

  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(
      const std::string& value);
  std::string* _internal_mutable_errmsg();

  public:
  // .MC.Data.MCDataResponseStatusCode code = 1;
  void clear_code() ;
  ::MC::Data::MCDataResponseStatusCode code() const;
  void set_code(::MC::Data::MCDataResponseStatusCode value);

  private:
  ::MC::Data::MCDataResponseStatusCode _internal_code() const;
  void _internal_set_code(::MC::Data::MCDataResponseStatusCode value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Data.MCDataUserFriendsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::MC::Data::Friend > friends_;
    ::google::protobuf::internal::ArenaStringPtr errmsg_;
    int code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eData_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MCDataUserIDRequest

// int32 userid = 1;
inline void MCDataUserIDRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = 0;
}
inline ::int32_t MCDataUserIDRequest::userid() const {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserIDRequest.userid)
  return _internal_userid();
}
inline void MCDataUserIDRequest::set_userid(::int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserIDRequest.userid)
}
inline ::int32_t MCDataUserIDRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_;
}
inline void MCDataUserIDRequest::_internal_set_userid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// Friend

// uint32 friendid = 1;
inline void Friend::clear_friendid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendid_ = 0u;
}
inline ::uint32_t Friend::friendid() const {
  // @@protoc_insertion_point(field_get:MC.Data.Friend.friendid)
  return _internal_friendid();
}
inline void Friend::set_friendid(::uint32_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:MC.Data.Friend.friendid)
}
inline ::uint32_t Friend::_internal_friendid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.friendid_;
}
inline void Friend::_internal_set_friendid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendid_ = value;
}

// string friendname = 2;
inline void Friend::clear_friendname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendname_.ClearToEmpty();
}
inline const std::string& Friend::friendname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.Friend.friendname)
  return _internal_friendname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Friend::set_friendname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.Friend.friendname)
}
inline std::string* Friend::mutable_friendname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_friendname();
  // @@protoc_insertion_point(field_mutable:MC.Data.Friend.friendname)
  return _s;
}
inline const std::string& Friend::_internal_friendname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.friendname_.Get();
}
inline void Friend::_internal_set_friendname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendname_.Set(value, GetArena());
}
inline std::string* Friend::_internal_mutable_friendname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.friendname_.Mutable( GetArena());
}
inline std::string* Friend::release_friendname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.Friend.friendname)
  return _impl_.friendname_.Release();
}
inline void Friend::set_allocated_friendname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.friendname_.IsDefault()) {
          _impl_.friendname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.Friend.friendname)
}

// string friendsign = 3;
inline void Friend::clear_friendsign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendsign_.ClearToEmpty();
}
inline const std::string& Friend::friendsign() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.Friend.friendsign)
  return _internal_friendsign();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Friend::set_friendsign(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendsign_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.Friend.friendsign)
}
inline std::string* Friend::mutable_friendsign() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_friendsign();
  // @@protoc_insertion_point(field_mutable:MC.Data.Friend.friendsign)
  return _s;
}
inline const std::string& Friend::_internal_friendsign() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.friendsign_.Get();
}
inline void Friend::_internal_set_friendsign(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendsign_.Set(value, GetArena());
}
inline std::string* Friend::_internal_mutable_friendsign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.friendsign_.Mutable( GetArena());
}
inline std::string* Friend::release_friendsign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.Friend.friendsign)
  return _impl_.friendsign_.Release();
}
inline void Friend::set_allocated_friendsign(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendsign_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.friendsign_.IsDefault()) {
          _impl_.friendsign_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.Friend.friendsign)
}

// string lastcontacttime = 4;
inline void Friend::clear_lastcontacttime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastcontacttime_.ClearToEmpty();
}
inline const std::string& Friend::lastcontacttime() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.Friend.lastcontacttime)
  return _internal_lastcontacttime();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Friend::set_lastcontacttime(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastcontacttime_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.Friend.lastcontacttime)
}
inline std::string* Friend::mutable_lastcontacttime() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_lastcontacttime();
  // @@protoc_insertion_point(field_mutable:MC.Data.Friend.lastcontacttime)
  return _s;
}
inline const std::string& Friend::_internal_lastcontacttime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastcontacttime_.Get();
}
inline void Friend::_internal_set_lastcontacttime(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastcontacttime_.Set(value, GetArena());
}
inline std::string* Friend::_internal_mutable_lastcontacttime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.lastcontacttime_.Mutable( GetArena());
}
inline std::string* Friend::release_lastcontacttime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.Friend.lastcontacttime)
  return _impl_.lastcontacttime_.Release();
}
inline void Friend::set_allocated_lastcontacttime(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastcontacttime_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lastcontacttime_.IsDefault()) {
          _impl_.lastcontacttime_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.Friend.lastcontacttime)
}

// -------------------------------------------------------------------

// MCDataUserFriendsResponse

// .MC.Data.MCDataResponseStatusCode code = 1;
inline void MCDataUserFriendsResponse::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
}
inline ::MC::Data::MCDataResponseStatusCode MCDataUserFriendsResponse::code() const {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserFriendsResponse.code)
  return _internal_code();
}
inline void MCDataUserFriendsResponse::set_code(::MC::Data::MCDataResponseStatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserFriendsResponse.code)
}
inline ::MC::Data::MCDataResponseStatusCode MCDataUserFriendsResponse::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::MC::Data::MCDataResponseStatusCode>(_impl_.code_);
}
inline void MCDataUserFriendsResponse::_internal_set_code(::MC::Data::MCDataResponseStatusCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = value;
}

// string errmsg = 2;
inline void MCDataUserFriendsResponse::clear_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& MCDataUserFriendsResponse::errmsg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserFriendsResponse.errmsg)
  return _internal_errmsg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataUserFriendsResponse::set_errmsg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserFriendsResponse.errmsg)
}
inline std::string* MCDataUserFriendsResponse::mutable_errmsg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataUserFriendsResponse.errmsg)
  return _s;
}
inline const std::string& MCDataUserFriendsResponse::_internal_errmsg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.errmsg_.Get();
}
inline void MCDataUserFriendsResponse::_internal_set_errmsg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.Set(value, GetArena());
}
inline std::string* MCDataUserFriendsResponse::_internal_mutable_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.errmsg_.Mutable( GetArena());
}
inline std::string* MCDataUserFriendsResponse::release_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataUserFriendsResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void MCDataUserFriendsResponse::set_allocated_errmsg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errmsg_.IsDefault()) {
          _impl_.errmsg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataUserFriendsResponse.errmsg)
}

// repeated .MC.Data.Friend friends = 3;
inline int MCDataUserFriendsResponse::_internal_friends_size() const {
  return _internal_friends().size();
}
inline int MCDataUserFriendsResponse::friends_size() const {
  return _internal_friends_size();
}
inline void MCDataUserFriendsResponse::clear_friends() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friends_.Clear();
}
inline ::MC::Data::Friend* MCDataUserFriendsResponse::mutable_friends(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataUserFriendsResponse.friends)
  return _internal_mutable_friends()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MC::Data::Friend>* MCDataUserFriendsResponse::mutable_friends()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MC.Data.MCDataUserFriendsResponse.friends)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_friends();
}
inline const ::MC::Data::Friend& MCDataUserFriendsResponse::friends(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserFriendsResponse.friends)
  return _internal_friends().Get(index);
}
inline ::MC::Data::Friend* MCDataUserFriendsResponse::add_friends() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::MC::Data::Friend* _add = _internal_mutable_friends()->Add();
  // @@protoc_insertion_point(field_add:MC.Data.MCDataUserFriendsResponse.friends)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MC::Data::Friend>& MCDataUserFriendsResponse::friends() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MC.Data.MCDataUserFriendsResponse.friends)
  return _internal_friends();
}
inline const ::google::protobuf::RepeatedPtrField<::MC::Data::Friend>&
MCDataUserFriendsResponse::_internal_friends() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.friends_;
}
inline ::google::protobuf::RepeatedPtrField<::MC::Data::Friend>*
MCDataUserFriendsResponse::_internal_mutable_friends() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.friends_;
}

// -------------------------------------------------------------------

// MCDataUserRequest

// string username = 1;
inline void MCDataUserRequest::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& MCDataUserRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataUserRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserRequest.username)
}
inline std::string* MCDataUserRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataUserRequest.username)
  return _s;
}
inline const std::string& MCDataUserRequest::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void MCDataUserRequest::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* MCDataUserRequest::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* MCDataUserRequest::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataUserRequest.username)
  return _impl_.username_.Release();
}
inline void MCDataUserRequest::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataUserRequest.username)
}

// -------------------------------------------------------------------

// MCDataUserResponse

// .MC.Data.MCDataResponseStatusCode code = 1;
inline void MCDataUserResponse::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
}
inline ::MC::Data::MCDataResponseStatusCode MCDataUserResponse::code() const {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserResponse.code)
  return _internal_code();
}
inline void MCDataUserResponse::set_code(::MC::Data::MCDataResponseStatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserResponse.code)
}
inline ::MC::Data::MCDataResponseStatusCode MCDataUserResponse::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::MC::Data::MCDataResponseStatusCode>(_impl_.code_);
}
inline void MCDataUserResponse::_internal_set_code(::MC::Data::MCDataResponseStatusCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = value;
}

// string password = 2;
inline void MCDataUserResponse::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& MCDataUserResponse::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserResponse.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataUserResponse::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserResponse.password)
}
inline std::string* MCDataUserResponse::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataUserResponse.password)
  return _s;
}
inline const std::string& MCDataUserResponse::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void MCDataUserResponse::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* MCDataUserResponse::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* MCDataUserResponse::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataUserResponse.password)
  return _impl_.password_.Release();
}
inline void MCDataUserResponse::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataUserResponse.password)
}

// string hxm = 3;
inline void MCDataUserResponse::clear_hxm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hxm_.ClearToEmpty();
}
inline const std::string& MCDataUserResponse::hxm() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserResponse.hxm)
  return _internal_hxm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataUserResponse::set_hxm(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hxm_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserResponse.hxm)
}
inline std::string* MCDataUserResponse::mutable_hxm() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hxm();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataUserResponse.hxm)
  return _s;
}
inline const std::string& MCDataUserResponse::_internal_hxm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hxm_.Get();
}
inline void MCDataUserResponse::_internal_set_hxm(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hxm_.Set(value, GetArena());
}
inline std::string* MCDataUserResponse::_internal_mutable_hxm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.hxm_.Mutable( GetArena());
}
inline std::string* MCDataUserResponse::release_hxm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataUserResponse.hxm)
  return _impl_.hxm_.Release();
}
inline void MCDataUserResponse::set_allocated_hxm(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hxm_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hxm_.IsDefault()) {
          _impl_.hxm_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataUserResponse.hxm)
}

// string errmsg = 4;
inline void MCDataUserResponse::clear_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& MCDataUserResponse::errmsg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserResponse.errmsg)
  return _internal_errmsg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataUserResponse::set_errmsg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserResponse.errmsg)
}
inline std::string* MCDataUserResponse::mutable_errmsg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataUserResponse.errmsg)
  return _s;
}
inline const std::string& MCDataUserResponse::_internal_errmsg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.errmsg_.Get();
}
inline void MCDataUserResponse::_internal_set_errmsg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.Set(value, GetArena());
}
inline std::string* MCDataUserResponse::_internal_mutable_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.errmsg_.Mutable( GetArena());
}
inline std::string* MCDataUserResponse::release_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataUserResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void MCDataUserResponse::set_allocated_errmsg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errmsg_.IsDefault()) {
          _impl_.errmsg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataUserResponse.errmsg)
}

// string nickname = 5;
inline void MCDataUserResponse::clear_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& MCDataUserResponse::nickname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserResponse.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataUserResponse::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserResponse.nickname)
}
inline std::string* MCDataUserResponse::mutable_nickname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataUserResponse.nickname)
  return _s;
}
inline const std::string& MCDataUserResponse::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Get();
}
inline void MCDataUserResponse::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.Set(value, GetArena());
}
inline std::string* MCDataUserResponse::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Mutable( GetArena());
}
inline std::string* MCDataUserResponse::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataUserResponse.nickname)
  return _impl_.nickname_.Release();
}
inline void MCDataUserResponse::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataUserResponse.nickname)
}

// bool gender = 6;
inline void MCDataUserResponse::clear_gender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gender_ = false;
}
inline bool MCDataUserResponse::gender() const {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserResponse.gender)
  return _internal_gender();
}
inline void MCDataUserResponse::set_gender(bool value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserResponse.gender)
}
inline bool MCDataUserResponse::_internal_gender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gender_;
}
inline void MCDataUserResponse::_internal_set_gender(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gender_ = value;
}

// string signature = 7;
inline void MCDataUserResponse::clear_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& MCDataUserResponse::signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserResponse.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataUserResponse::set_signature(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signature_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserResponse.signature)
}
inline std::string* MCDataUserResponse::mutable_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataUserResponse.signature)
  return _s;
}
inline const std::string& MCDataUserResponse::_internal_signature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.signature_.Get();
}
inline void MCDataUserResponse::_internal_set_signature(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signature_.Set(value, GetArena());
}
inline std::string* MCDataUserResponse::_internal_mutable_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.signature_.Mutable( GetArena());
}
inline std::string* MCDataUserResponse::release_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataUserResponse.signature)
  return _impl_.signature_.Release();
}
inline void MCDataUserResponse::set_allocated_signature(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signature_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataUserResponse.signature)
}

// string email = 8;
inline void MCDataUserResponse::clear_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& MCDataUserResponse::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserResponse.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataUserResponse::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserResponse.email)
}
inline std::string* MCDataUserResponse::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataUserResponse.email)
  return _s;
}
inline const std::string& MCDataUserResponse::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void MCDataUserResponse::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.Set(value, GetArena());
}
inline std::string* MCDataUserResponse::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* MCDataUserResponse::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataUserResponse.email)
  return _impl_.email_.Release();
}
inline void MCDataUserResponse::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataUserResponse.email)
}

// string phone = 9;
inline void MCDataUserResponse::clear_phone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phone_.ClearToEmpty();
}
inline const std::string& MCDataUserResponse::phone() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserResponse.phone)
  return _internal_phone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataUserResponse::set_phone(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phone_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserResponse.phone)
}
inline std::string* MCDataUserResponse::mutable_phone() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataUserResponse.phone)
  return _s;
}
inline const std::string& MCDataUserResponse::_internal_phone() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phone_.Get();
}
inline void MCDataUserResponse::_internal_set_phone(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phone_.Set(value, GetArena());
}
inline std::string* MCDataUserResponse::_internal_mutable_phone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.phone_.Mutable( GetArena());
}
inline std::string* MCDataUserResponse::release_phone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataUserResponse.phone)
  return _impl_.phone_.Release();
}
inline void MCDataUserResponse::set_allocated_phone(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phone_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phone_.IsDefault()) {
          _impl_.phone_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataUserResponse.phone)
}

// string birthday = 10;
inline void MCDataUserResponse::clear_birthday() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.birthday_.ClearToEmpty();
}
inline const std::string& MCDataUserResponse::birthday() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserResponse.birthday)
  return _internal_birthday();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataUserResponse::set_birthday(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.birthday_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserResponse.birthday)
}
inline std::string* MCDataUserResponse::mutable_birthday() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_birthday();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataUserResponse.birthday)
  return _s;
}
inline const std::string& MCDataUserResponse::_internal_birthday() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.birthday_.Get();
}
inline void MCDataUserResponse::_internal_set_birthday(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.birthday_.Set(value, GetArena());
}
inline std::string* MCDataUserResponse::_internal_mutable_birthday() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.birthday_.Mutable( GetArena());
}
inline std::string* MCDataUserResponse::release_birthday() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataUserResponse.birthday)
  return _impl_.birthday_.Release();
}
inline void MCDataUserResponse::set_allocated_birthday(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.birthday_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.birthday_.IsDefault()) {
          _impl_.birthday_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataUserResponse.birthday)
}

// int32 userid = 11;
inline void MCDataUserResponse::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = 0;
}
inline ::int32_t MCDataUserResponse::userid() const {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataUserResponse.userid)
  return _internal_userid();
}
inline void MCDataUserResponse::set_userid(::int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:MC.Data.MCDataUserResponse.userid)
}
inline ::int32_t MCDataUserResponse::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_;
}
inline void MCDataUserResponse::_internal_set_userid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// MCDataRegistRequest

// string username = 1;
inline void MCDataRegistRequest::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& MCDataRegistRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataRegistRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataRegistRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataRegistRequest.username)
}
inline std::string* MCDataRegistRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataRegistRequest.username)
  return _s;
}
inline const std::string& MCDataRegistRequest::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void MCDataRegistRequest::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* MCDataRegistRequest::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* MCDataRegistRequest::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataRegistRequest.username)
  return _impl_.username_.Release();
}
inline void MCDataRegistRequest::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataRegistRequest.username)
}

// string password = 2;
inline void MCDataRegistRequest::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& MCDataRegistRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataRegistRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataRegistRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataRegistRequest.password)
}
inline std::string* MCDataRegistRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataRegistRequest.password)
  return _s;
}
inline const std::string& MCDataRegistRequest::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void MCDataRegistRequest::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* MCDataRegistRequest::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* MCDataRegistRequest::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataRegistRequest.password)
  return _impl_.password_.Release();
}
inline void MCDataRegistRequest::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataRegistRequest.password)
}

// string nickname = 3;
inline void MCDataRegistRequest::clear_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& MCDataRegistRequest::nickname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataRegistRequest.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataRegistRequest::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataRegistRequest.nickname)
}
inline std::string* MCDataRegistRequest::mutable_nickname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataRegistRequest.nickname)
  return _s;
}
inline const std::string& MCDataRegistRequest::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Get();
}
inline void MCDataRegistRequest::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.Set(value, GetArena());
}
inline std::string* MCDataRegistRequest::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Mutable( GetArena());
}
inline std::string* MCDataRegistRequest::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataRegistRequest.nickname)
  return _impl_.nickname_.Release();
}
inline void MCDataRegistRequest::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataRegistRequest.nickname)
}

// string email = 4;
inline void MCDataRegistRequest::clear_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& MCDataRegistRequest::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataRegistRequest.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataRegistRequest::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataRegistRequest.email)
}
inline std::string* MCDataRegistRequest::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataRegistRequest.email)
  return _s;
}
inline const std::string& MCDataRegistRequest::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void MCDataRegistRequest::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.Set(value, GetArena());
}
inline std::string* MCDataRegistRequest::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* MCDataRegistRequest::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataRegistRequest.email)
  return _impl_.email_.Release();
}
inline void MCDataRegistRequest::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataRegistRequest.email)
}

// -------------------------------------------------------------------

// MCDataRegistResponse

// .MC.Data.MCDataResponseStatusCode code = 1;
inline void MCDataRegistResponse::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
}
inline ::MC::Data::MCDataResponseStatusCode MCDataRegistResponse::code() const {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataRegistResponse.code)
  return _internal_code();
}
inline void MCDataRegistResponse::set_code(::MC::Data::MCDataResponseStatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:MC.Data.MCDataRegistResponse.code)
}
inline ::MC::Data::MCDataResponseStatusCode MCDataRegistResponse::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::MC::Data::MCDataResponseStatusCode>(_impl_.code_);
}
inline void MCDataRegistResponse::_internal_set_code(::MC::Data::MCDataResponseStatusCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = value;
}

// string errmsg = 2;
inline void MCDataRegistResponse::clear_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& MCDataRegistResponse::errmsg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Data.MCDataRegistResponse.errmsg)
  return _internal_errmsg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MCDataRegistResponse::set_errmsg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Data.MCDataRegistResponse.errmsg)
}
inline std::string* MCDataRegistResponse::mutable_errmsg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:MC.Data.MCDataRegistResponse.errmsg)
  return _s;
}
inline const std::string& MCDataRegistResponse::_internal_errmsg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.errmsg_.Get();
}
inline void MCDataRegistResponse::_internal_set_errmsg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.Set(value, GetArena());
}
inline std::string* MCDataRegistResponse::_internal_mutable_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.errmsg_.Mutable( GetArena());
}
inline std::string* MCDataRegistResponse::release_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Data.MCDataRegistResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void MCDataRegistResponse::set_allocated_errmsg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errmsg_.IsDefault()) {
          _impl_.errmsg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Data.MCDataRegistResponse.errmsg)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Data
}  // namespace MC


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::MC::Data::MCDataResponseStatusCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::MC::Data::MCDataResponseStatusCode>() {
  return ::MC::Data::MCDataResponseStatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_MC_2eData_2eproto_2epb_2eh
