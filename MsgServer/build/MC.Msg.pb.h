// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MC.Msg.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_MC_2eMsg_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_MC_2eMsg_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_MC_2eMsg_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_MC_2eMsg_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_MC_2eMsg_2eproto;
namespace MC {
namespace Msg {
class GetUserInfoReq;
struct GetUserInfoReqDefaultTypeInternal;
extern GetUserInfoReqDefaultTypeInternal _GetUserInfoReq_default_instance_;
class GetUserInfoRes;
struct GetUserInfoResDefaultTypeInternal;
extern GetUserInfoResDefaultTypeInternal _GetUserInfoRes_default_instance_;
class MsgFriend;
struct MsgFriendDefaultTypeInternal;
extern MsgFriendDefaultTypeInternal _MsgFriend_default_instance_;
class SendMessageReq;
struct SendMessageReqDefaultTypeInternal;
extern SendMessageReqDefaultTypeInternal _SendMessageReq_default_instance_;
class SendMessageRes;
struct SendMessageResDefaultTypeInternal;
extern SendMessageResDefaultTypeInternal _SendMessageRes_default_instance_;
class UpdateUserHeadReq;
struct UpdateUserHeadReqDefaultTypeInternal;
extern UpdateUserHeadReqDefaultTypeInternal _UpdateUserHeadReq_default_instance_;
class UpdateUserHeadRes;
struct UpdateUserHeadResDefaultTypeInternal;
extern UpdateUserHeadResDefaultTypeInternal _UpdateUserHeadRes_default_instance_;
class UpdateUserInfoReq;
struct UpdateUserInfoReqDefaultTypeInternal;
extern UpdateUserInfoReqDefaultTypeInternal _UpdateUserInfoReq_default_instance_;
class UpdateUserInfoRes;
struct UpdateUserInfoResDefaultTypeInternal;
extern UpdateUserInfoResDefaultTypeInternal _UpdateUserInfoRes_default_instance_;
class UserID;
struct UserIDDefaultTypeInternal;
extern UserIDDefaultTypeInternal _UserID_default_instance_;
class UserIDList;
struct UserIDListDefaultTypeInternal;
extern UserIDListDefaultTypeInternal _UserIDList_default_instance_;
}  // namespace Msg
}  // namespace MC
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace MC {
namespace Msg {
enum MCResponseStatusCode : int {
  OK = 0,
  FAILED = 1,
  ERROR = 2,
  MCResponseStatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MCResponseStatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MCResponseStatusCode_IsValid(int value);
extern const uint32_t MCResponseStatusCode_internal_data_[];
constexpr MCResponseStatusCode MCResponseStatusCode_MIN = static_cast<MCResponseStatusCode>(0);
constexpr MCResponseStatusCode MCResponseStatusCode_MAX = static_cast<MCResponseStatusCode>(2);
constexpr int MCResponseStatusCode_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
MCResponseStatusCode_descriptor();
template <typename T>
const std::string& MCResponseStatusCode_Name(T value) {
  static_assert(std::is_same<T, MCResponseStatusCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MCResponseStatusCode_Name().");
  return MCResponseStatusCode_Name(static_cast<MCResponseStatusCode>(value));
}
template <>
inline const std::string& MCResponseStatusCode_Name(MCResponseStatusCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MCResponseStatusCode_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MCResponseStatusCode_Parse(absl::string_view name, MCResponseStatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MCResponseStatusCode>(
      MCResponseStatusCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UserID final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Msg.UserID) */ {
 public:
  inline UserID() : UserID(nullptr) {}
  ~UserID() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserID(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserID(const UserID& from) : UserID(nullptr, from) {}
  inline UserID(UserID&& from) noexcept
      : UserID(nullptr, std::move(from)) {}
  inline UserID& operator=(const UserID& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserID& operator=(UserID&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserID& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserID* internal_default_instance() {
    return reinterpret_cast<const UserID*>(
        &_UserID_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(UserID& a, UserID& b) { a.Swap(&b); }
  inline void Swap(UserID* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserID* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UserID>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserID& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserID& from) { UserID::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserID* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Msg.UserID"; }

 protected:
  explicit UserID(::google::protobuf::Arena* arena);
  UserID(::google::protobuf::Arena* arena, const UserID& from);
  UserID(::google::protobuf::Arena* arena, UserID&& from) noexcept
      : UserID(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUseridFieldNumber = 1,
  };
  // uint32 userid = 1;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Msg.UserID)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t userid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eMsg_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserInfoRes final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Msg.UpdateUserInfoRes) */ {
 public:
  inline UpdateUserInfoRes() : UpdateUserInfoRes(nullptr) {}
  ~UpdateUserInfoRes() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateUserInfoRes(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateUserInfoRes(const UpdateUserInfoRes& from) : UpdateUserInfoRes(nullptr, from) {}
  inline UpdateUserInfoRes(UpdateUserInfoRes&& from) noexcept
      : UpdateUserInfoRes(nullptr, std::move(from)) {}
  inline UpdateUserInfoRes& operator=(const UpdateUserInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserInfoRes& operator=(UpdateUserInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserInfoRes* internal_default_instance() {
    return reinterpret_cast<const UpdateUserInfoRes*>(
        &_UpdateUserInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(UpdateUserInfoRes& a, UpdateUserInfoRes& b) { a.Swap(&b); }
  inline void Swap(UpdateUserInfoRes* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserInfoRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserInfoRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UpdateUserInfoRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateUserInfoRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateUserInfoRes& from) { UpdateUserInfoRes::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateUserInfoRes* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Msg.UpdateUserInfoRes"; }

 protected:
  explicit UpdateUserInfoRes(::google::protobuf::Arena* arena);
  UpdateUserInfoRes(::google::protobuf::Arena* arena, const UpdateUserInfoRes& from);
  UpdateUserInfoRes(::google::protobuf::Arena* arena, UpdateUserInfoRes&& from) noexcept
      : UpdateUserInfoRes(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrMsgFieldNumber = 2,
    kNewValueFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string err_msg = 2;
  void clear_err_msg() ;
  const std::string& err_msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_err_msg(Arg_&& arg, Args_... args);
  std::string* mutable_err_msg();
  PROTOBUF_NODISCARD std::string* release_err_msg();
  void set_allocated_err_msg(std::string* value);

  private:
  const std::string& _internal_err_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_msg(
      const std::string& value);
  std::string* _internal_mutable_err_msg();

  public:
  // string new_value = 3;
  void clear_new_value() ;
  const std::string& new_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_value(Arg_&& arg, Args_... args);
  std::string* mutable_new_value();
  PROTOBUF_NODISCARD std::string* release_new_value();
  void set_allocated_new_value(std::string* value);

  private:
  const std::string& _internal_new_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_value(
      const std::string& value);
  std::string* _internal_mutable_new_value();

  public:
  // .MC.Msg.MCResponseStatusCode code = 1;
  void clear_code() ;
  ::MC::Msg::MCResponseStatusCode code() const;
  void set_code(::MC::Msg::MCResponseStatusCode value);

  private:
  ::MC::Msg::MCResponseStatusCode _internal_code() const;
  void _internal_set_code(::MC::Msg::MCResponseStatusCode value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Msg.UpdateUserInfoRes)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr err_msg_;
    ::google::protobuf::internal::ArenaStringPtr new_value_;
    int code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eMsg_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserInfoReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Msg.UpdateUserInfoReq) */ {
 public:
  inline UpdateUserInfoReq() : UpdateUserInfoReq(nullptr) {}
  ~UpdateUserInfoReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateUserInfoReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateUserInfoReq(const UpdateUserInfoReq& from) : UpdateUserInfoReq(nullptr, from) {}
  inline UpdateUserInfoReq(UpdateUserInfoReq&& from) noexcept
      : UpdateUserInfoReq(nullptr, std::move(from)) {}
  inline UpdateUserInfoReq& operator=(const UpdateUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserInfoReq& operator=(UpdateUserInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserInfoReq* internal_default_instance() {
    return reinterpret_cast<const UpdateUserInfoReq*>(
        &_UpdateUserInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(UpdateUserInfoReq& a, UpdateUserInfoReq& b) { a.Swap(&b); }
  inline void Swap(UpdateUserInfoReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserInfoReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserInfoReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UpdateUserInfoReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateUserInfoReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateUserInfoReq& from) { UpdateUserInfoReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateUserInfoReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Msg.UpdateUserInfoReq"; }

 protected:
  explicit UpdateUserInfoReq(::google::protobuf::Arena* arena);
  UpdateUserInfoReq(::google::protobuf::Arena* arena, const UpdateUserInfoReq& from);
  UpdateUserInfoReq(::google::protobuf::Arena* arena, UpdateUserInfoReq&& from) noexcept
      : UpdateUserInfoReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFieldFieldNumber = 2,
    kValueFieldNumber = 3,
    kUseridFieldNumber = 1,
  };
  // string field = 2;
  void clear_field() ;
  const std::string& field() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field(Arg_&& arg, Args_... args);
  std::string* mutable_field();
  PROTOBUF_NODISCARD std::string* release_field();
  void set_allocated_field(std::string* value);

  private:
  const std::string& _internal_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field(
      const std::string& value);
  std::string* _internal_mutable_field();

  public:
  // string value = 3;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // uint32 userid = 1;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Msg.UpdateUserInfoReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr field_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::uint32_t userid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eMsg_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserHeadRes final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Msg.UpdateUserHeadRes) */ {
 public:
  inline UpdateUserHeadRes() : UpdateUserHeadRes(nullptr) {}
  ~UpdateUserHeadRes() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateUserHeadRes(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateUserHeadRes(const UpdateUserHeadRes& from) : UpdateUserHeadRes(nullptr, from) {}
  inline UpdateUserHeadRes(UpdateUserHeadRes&& from) noexcept
      : UpdateUserHeadRes(nullptr, std::move(from)) {}
  inline UpdateUserHeadRes& operator=(const UpdateUserHeadRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserHeadRes& operator=(UpdateUserHeadRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserHeadRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserHeadRes* internal_default_instance() {
    return reinterpret_cast<const UpdateUserHeadRes*>(
        &_UpdateUserHeadRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(UpdateUserHeadRes& a, UpdateUserHeadRes& b) { a.Swap(&b); }
  inline void Swap(UpdateUserHeadRes* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserHeadRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserHeadRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UpdateUserHeadRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateUserHeadRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateUserHeadRes& from) { UpdateUserHeadRes::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateUserHeadRes* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Msg.UpdateUserHeadRes"; }

 protected:
  explicit UpdateUserHeadRes(::google::protobuf::Arena* arena);
  UpdateUserHeadRes(::google::protobuf::Arena* arena, const UpdateUserHeadRes& from);
  UpdateUserHeadRes(::google::protobuf::Arena* arena, UpdateUserHeadRes&& from) noexcept
      : UpdateUserHeadRes(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrMsgFieldNumber = 2,
    kUrlFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string err_msg = 2;
  void clear_err_msg() ;
  const std::string& err_msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_err_msg(Arg_&& arg, Args_... args);
  std::string* mutable_err_msg();
  PROTOBUF_NODISCARD std::string* release_err_msg();
  void set_allocated_err_msg(std::string* value);

  private:
  const std::string& _internal_err_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_msg(
      const std::string& value);
  std::string* _internal_mutable_err_msg();

  public:
  // string url = 3;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // .MC.Msg.MCResponseStatusCode code = 1;
  void clear_code() ;
  ::MC::Msg::MCResponseStatusCode code() const;
  void set_code(::MC::Msg::MCResponseStatusCode value);

  private:
  ::MC::Msg::MCResponseStatusCode _internal_code() const;
  void _internal_set_code(::MC::Msg::MCResponseStatusCode value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Msg.UpdateUserHeadRes)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr err_msg_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    int code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eMsg_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserHeadReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Msg.UpdateUserHeadReq) */ {
 public:
  inline UpdateUserHeadReq() : UpdateUserHeadReq(nullptr) {}
  ~UpdateUserHeadReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateUserHeadReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateUserHeadReq(const UpdateUserHeadReq& from) : UpdateUserHeadReq(nullptr, from) {}
  inline UpdateUserHeadReq(UpdateUserHeadReq&& from) noexcept
      : UpdateUserHeadReq(nullptr, std::move(from)) {}
  inline UpdateUserHeadReq& operator=(const UpdateUserHeadReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserHeadReq& operator=(UpdateUserHeadReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserHeadReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserHeadReq* internal_default_instance() {
    return reinterpret_cast<const UpdateUserHeadReq*>(
        &_UpdateUserHeadReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(UpdateUserHeadReq& a, UpdateUserHeadReq& b) { a.Swap(&b); }
  inline void Swap(UpdateUserHeadReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserHeadReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserHeadReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UpdateUserHeadReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateUserHeadReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateUserHeadReq& from) { UpdateUserHeadReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateUserHeadReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Msg.UpdateUserHeadReq"; }

 protected:
  explicit UpdateUserHeadReq(::google::protobuf::Arena* arena);
  UpdateUserHeadReq(::google::protobuf::Arena* arena, const UpdateUserHeadReq& from);
  UpdateUserHeadReq(::google::protobuf::Arena* arena, UpdateUserHeadReq&& from) noexcept
      : UpdateUserHeadReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPicFieldNumber = 2,
    kUseridFieldNumber = 1,
  };
  // string pic = 2;
  void clear_pic() ;
  const std::string& pic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pic(Arg_&& arg, Args_... args);
  std::string* mutable_pic();
  PROTOBUF_NODISCARD std::string* release_pic();
  void set_allocated_pic(std::string* value);

  private:
  const std::string& _internal_pic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pic(
      const std::string& value);
  std::string* _internal_mutable_pic();

  public:
  // uint32 userid = 1;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Msg.UpdateUserHeadReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr pic_;
    ::uint32_t userid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eMsg_2eproto;
};
// -------------------------------------------------------------------

class SendMessageRes final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Msg.SendMessageRes) */ {
 public:
  inline SendMessageRes() : SendMessageRes(nullptr) {}
  ~SendMessageRes() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SendMessageRes(
      ::google::protobuf::internal::ConstantInitialized);

  inline SendMessageRes(const SendMessageRes& from) : SendMessageRes(nullptr, from) {}
  inline SendMessageRes(SendMessageRes&& from) noexcept
      : SendMessageRes(nullptr, std::move(from)) {}
  inline SendMessageRes& operator=(const SendMessageRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageRes& operator=(SendMessageRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessageRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessageRes* internal_default_instance() {
    return reinterpret_cast<const SendMessageRes*>(
        &_SendMessageRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SendMessageRes& a, SendMessageRes& b) { a.Swap(&b); }
  inline void Swap(SendMessageRes* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessageRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SendMessageRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendMessageRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SendMessageRes& from) { SendMessageRes::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SendMessageRes* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Msg.SendMessageRes"; }

 protected:
  explicit SendMessageRes(::google::protobuf::Arena* arena);
  SendMessageRes(::google::protobuf::Arena* arena, const SendMessageRes& from);
  SendMessageRes(::google::protobuf::Arena* arena, SendMessageRes&& from) noexcept
      : SendMessageRes(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCodeFieldNumber = 1,
  };
  // .MC.Msg.MCResponseStatusCode code = 1;
  void clear_code() ;
  ::MC::Msg::MCResponseStatusCode code() const;
  void set_code(::MC::Msg::MCResponseStatusCode value);

  private:
  ::MC::Msg::MCResponseStatusCode _internal_code() const;
  void _internal_set_code(::MC::Msg::MCResponseStatusCode value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Msg.SendMessageRes)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    int code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eMsg_2eproto;
};
// -------------------------------------------------------------------

class SendMessageReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Msg.SendMessageReq) */ {
 public:
  inline SendMessageReq() : SendMessageReq(nullptr) {}
  ~SendMessageReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SendMessageReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline SendMessageReq(const SendMessageReq& from) : SendMessageReq(nullptr, from) {}
  inline SendMessageReq(SendMessageReq&& from) noexcept
      : SendMessageReq(nullptr, std::move(from)) {}
  inline SendMessageReq& operator=(const SendMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageReq& operator=(SendMessageReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessageReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessageReq* internal_default_instance() {
    return reinterpret_cast<const SendMessageReq*>(
        &_SendMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SendMessageReq& a, SendMessageReq& b) { a.Swap(&b); }
  inline void Swap(SendMessageReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessageReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SendMessageReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendMessageReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SendMessageReq& from) { SendMessageReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SendMessageReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Msg.SendMessageReq"; }

 protected:
  explicit SendMessageReq(::google::protobuf::Arena* arena);
  SendMessageReq(::google::protobuf::Arena* arena, const SendMessageReq& from);
  SendMessageReq(::google::protobuf::Arena* arena, SendMessageReq&& from) noexcept
      : SendMessageReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMsgFieldNumber = 3,
    kSenderFieldNumber = 1,
    kRecieverFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // uint32 sender = 1;
  void clear_sender() ;
  ::uint32_t sender() const;
  void set_sender(::uint32_t value);

  private:
  ::uint32_t _internal_sender() const;
  void _internal_set_sender(::uint32_t value);

  public:
  // uint32 reciever = 2;
  void clear_reciever() ;
  ::uint32_t reciever() const;
  void set_reciever(::uint32_t value);

  private:
  ::uint32_t _internal_reciever() const;
  void _internal_set_reciever(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Msg.SendMessageReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      33, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::uint32_t sender_;
    ::uint32_t reciever_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eMsg_2eproto;
};
// -------------------------------------------------------------------

class MsgFriend final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Msg.MsgFriend) */ {
 public:
  inline MsgFriend() : MsgFriend(nullptr) {}
  ~MsgFriend() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgFriend(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgFriend(const MsgFriend& from) : MsgFriend(nullptr, from) {}
  inline MsgFriend(MsgFriend&& from) noexcept
      : MsgFriend(nullptr, std::move(from)) {}
  inline MsgFriend& operator=(const MsgFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgFriend& operator=(MsgFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgFriend* internal_default_instance() {
    return reinterpret_cast<const MsgFriend*>(
        &_MsgFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MsgFriend& a, MsgFriend& b) { a.Swap(&b); }
  inline void Swap(MsgFriend* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgFriend* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgFriend* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MsgFriend>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgFriend& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgFriend& from) { MsgFriend::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MsgFriend* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Msg.MsgFriend"; }

 protected:
  explicit MsgFriend(::google::protobuf::Arena* arena);
  MsgFriend(::google::protobuf::Arena* arena, const MsgFriend& from);
  MsgFriend(::google::protobuf::Arena* arena, MsgFriend&& from) noexcept
      : MsgFriend(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFriendnameFieldNumber = 2,
    kFriendsignFieldNumber = 3,
    kLastcontacttimeFieldNumber = 4,
    kFriendidFieldNumber = 1,
  };
  // string friendname = 2;
  void clear_friendname() ;
  const std::string& friendname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_friendname(Arg_&& arg, Args_... args);
  std::string* mutable_friendname();
  PROTOBUF_NODISCARD std::string* release_friendname();
  void set_allocated_friendname(std::string* value);

  private:
  const std::string& _internal_friendname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendname(
      const std::string& value);
  std::string* _internal_mutable_friendname();

  public:
  // string friendsign = 3;
  void clear_friendsign() ;
  const std::string& friendsign() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_friendsign(Arg_&& arg, Args_... args);
  std::string* mutable_friendsign();
  PROTOBUF_NODISCARD std::string* release_friendsign();
  void set_allocated_friendsign(std::string* value);

  private:
  const std::string& _internal_friendsign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendsign(
      const std::string& value);
  std::string* _internal_mutable_friendsign();

  public:
  // string lastcontacttime = 4;
  void clear_lastcontacttime() ;
  const std::string& lastcontacttime() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lastcontacttime(Arg_&& arg, Args_... args);
  std::string* mutable_lastcontacttime();
  PROTOBUF_NODISCARD std::string* release_lastcontacttime();
  void set_allocated_lastcontacttime(std::string* value);

  private:
  const std::string& _internal_lastcontacttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastcontacttime(
      const std::string& value);
  std::string* _internal_mutable_lastcontacttime();

  public:
  // uint32 friendid = 1;
  void clear_friendid() ;
  ::uint32_t friendid() const;
  void set_friendid(::uint32_t value);

  private:
  ::uint32_t _internal_friendid() const;
  void _internal_set_friendid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Msg.MsgFriend)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr friendname_;
    ::google::protobuf::internal::ArenaStringPtr friendsign_;
    ::google::protobuf::internal::ArenaStringPtr lastcontacttime_;
    ::uint32_t friendid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eMsg_2eproto;
};
// -------------------------------------------------------------------

class GetUserInfoRes final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Msg.GetUserInfoRes) */ {
 public:
  inline GetUserInfoRes() : GetUserInfoRes(nullptr) {}
  ~GetUserInfoRes() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetUserInfoRes(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetUserInfoRes(const GetUserInfoRes& from) : GetUserInfoRes(nullptr, from) {}
  inline GetUserInfoRes(GetUserInfoRes&& from) noexcept
      : GetUserInfoRes(nullptr, std::move(from)) {}
  inline GetUserInfoRes& operator=(const GetUserInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserInfoRes& operator=(GetUserInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserInfoRes* internal_default_instance() {
    return reinterpret_cast<const GetUserInfoRes*>(
        &_GetUserInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(GetUserInfoRes& a, GetUserInfoRes& b) { a.Swap(&b); }
  inline void Swap(GetUserInfoRes* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserInfoRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserInfoRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetUserInfoRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetUserInfoRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetUserInfoRes& from) { GetUserInfoRes::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetUserInfoRes* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Msg.GetUserInfoRes"; }

 protected:
  explicit GetUserInfoRes(::google::protobuf::Arena* arena);
  GetUserInfoRes(::google::protobuf::Arena* arena, const GetUserInfoRes& from);
  GetUserInfoRes(::google::protobuf::Arena* arena, GetUserInfoRes&& from) noexcept
      : GetUserInfoRes(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFriendsFieldNumber = 6,
    kErrMsgFieldNumber = 2,
    kNameFieldNumber = 3,
    kPicFieldNumber = 4,
    kSignFieldNumber = 5,
    kCodeFieldNumber = 1,
  };
  // repeated uint32 friends = 6;
  int friends_size() const;
  private:
  int _internal_friends_size() const;

  public:
  void clear_friends() ;
  ::uint32_t friends(int index) const;
  void set_friends(int index, ::uint32_t value);
  void add_friends(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& friends() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_friends();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_friends() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_friends();

  public:
  // string err_msg = 2;
  void clear_err_msg() ;
  const std::string& err_msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_err_msg(Arg_&& arg, Args_... args);
  std::string* mutable_err_msg();
  PROTOBUF_NODISCARD std::string* release_err_msg();
  void set_allocated_err_msg(std::string* value);

  private:
  const std::string& _internal_err_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_msg(
      const std::string& value);
  std::string* _internal_mutable_err_msg();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string pic = 4;
  void clear_pic() ;
  const std::string& pic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pic(Arg_&& arg, Args_... args);
  std::string* mutable_pic();
  PROTOBUF_NODISCARD std::string* release_pic();
  void set_allocated_pic(std::string* value);

  private:
  const std::string& _internal_pic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pic(
      const std::string& value);
  std::string* _internal_mutable_pic();

  public:
  // string sign = 5;
  void clear_sign() ;
  const std::string& sign() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sign(Arg_&& arg, Args_... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* value);

  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(
      const std::string& value);
  std::string* _internal_mutable_sign();

  public:
  // .MC.Msg.MCResponseStatusCode code = 1;
  void clear_code() ;
  ::MC::Msg::MCResponseStatusCode code() const;
  void set_code(::MC::Msg::MCResponseStatusCode value);

  private:
  ::MC::Msg::MCResponseStatusCode _internal_code() const;
  void _internal_set_code(::MC::Msg::MCResponseStatusCode value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Msg.GetUserInfoRes)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::uint32_t> friends_;
    mutable ::google::protobuf::internal::CachedSize _friends_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr err_msg_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr pic_;
    ::google::protobuf::internal::ArenaStringPtr sign_;
    int code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eMsg_2eproto;
};
// -------------------------------------------------------------------

class GetUserInfoReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Msg.GetUserInfoReq) */ {
 public:
  inline GetUserInfoReq() : GetUserInfoReq(nullptr) {}
  ~GetUserInfoReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetUserInfoReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetUserInfoReq(const GetUserInfoReq& from) : GetUserInfoReq(nullptr, from) {}
  inline GetUserInfoReq(GetUserInfoReq&& from) noexcept
      : GetUserInfoReq(nullptr, std::move(from)) {}
  inline GetUserInfoReq& operator=(const GetUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserInfoReq& operator=(GetUserInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetUserInfoReq*>(
        &_GetUserInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(GetUserInfoReq& a, GetUserInfoReq& b) { a.Swap(&b); }
  inline void Swap(GetUserInfoReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserInfoReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserInfoReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetUserInfoReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetUserInfoReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetUserInfoReq& from) { GetUserInfoReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetUserInfoReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Msg.GetUserInfoReq"; }

 protected:
  explicit GetUserInfoReq(::google::protobuf::Arena* arena);
  GetUserInfoReq(::google::protobuf::Arena* arena, const GetUserInfoReq& from);
  GetUserInfoReq(::google::protobuf::Arena* arena, GetUserInfoReq&& from) noexcept
      : GetUserInfoReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUseridFieldNumber = 1,
  };
  // uint32 userid = 1;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Msg.GetUserInfoReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t userid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eMsg_2eproto;
};
// -------------------------------------------------------------------

class UserIDList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MC.Msg.UserIDList) */ {
 public:
  inline UserIDList() : UserIDList(nullptr) {}
  ~UserIDList() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserIDList(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserIDList(const UserIDList& from) : UserIDList(nullptr, from) {}
  inline UserIDList(UserIDList&& from) noexcept
      : UserIDList(nullptr, std::move(from)) {}
  inline UserIDList& operator=(const UserIDList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserIDList& operator=(UserIDList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserIDList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserIDList* internal_default_instance() {
    return reinterpret_cast<const UserIDList*>(
        &_UserIDList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(UserIDList& a, UserIDList& b) { a.Swap(&b); }
  inline void Swap(UserIDList* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserIDList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserIDList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UserIDList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserIDList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserIDList& from) { UserIDList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserIDList* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MC.Msg.UserIDList"; }

 protected:
  explicit UserIDList(::google::protobuf::Arena* arena);
  UserIDList(::google::protobuf::Arena* arena, const UserIDList& from);
  UserIDList(::google::protobuf::Arena* arena, UserIDList&& from) noexcept
      : UserIDList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFriendsFieldNumber = 3,
    kErrmsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .MC.Msg.MsgFriend friends = 3;
  int friends_size() const;
  private:
  int _internal_friends_size() const;

  public:
  void clear_friends() ;
  ::MC::Msg::MsgFriend* mutable_friends(int index);
  ::google::protobuf::RepeatedPtrField<::MC::Msg::MsgFriend>* mutable_friends();

  private:
  const ::google::protobuf::RepeatedPtrField<::MC::Msg::MsgFriend>& _internal_friends() const;
  ::google::protobuf::RepeatedPtrField<::MC::Msg::MsgFriend>* _internal_mutable_friends();
  public:
  const ::MC::Msg::MsgFriend& friends(int index) const;
  ::MC::Msg::MsgFriend* add_friends();
  const ::google::protobuf::RepeatedPtrField<::MC::Msg::MsgFriend>& friends() const;
  // string errmsg = 2;
  void clear_errmsg() ;
  const std::string& errmsg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errmsg(Arg_&& arg, Args_... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* value);

  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(
      const std::string& value);
  std::string* _internal_mutable_errmsg();

  public:
  // .MC.Msg.MCResponseStatusCode code = 1;
  void clear_code() ;
  ::MC::Msg::MCResponseStatusCode code() const;
  void set_code(::MC::Msg::MCResponseStatusCode value);

  private:
  ::MC::Msg::MCResponseStatusCode _internal_code() const;
  void _internal_set_code(::MC::Msg::MCResponseStatusCode value);

  public:
  // @@protoc_insertion_point(class_scope:MC.Msg.UserIDList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      32, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::MC::Msg::MsgFriend > friends_;
    ::google::protobuf::internal::ArenaStringPtr errmsg_;
    int code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MC_2eMsg_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UserID

// uint32 userid = 1;
inline void UserID::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = 0u;
}
inline ::uint32_t UserID::userid() const {
  // @@protoc_insertion_point(field_get:MC.Msg.UserID.userid)
  return _internal_userid();
}
inline void UserID::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:MC.Msg.UserID.userid)
}
inline ::uint32_t UserID::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_;
}
inline void UserID::_internal_set_userid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// MsgFriend

// uint32 friendid = 1;
inline void MsgFriend::clear_friendid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendid_ = 0u;
}
inline ::uint32_t MsgFriend::friendid() const {
  // @@protoc_insertion_point(field_get:MC.Msg.MsgFriend.friendid)
  return _internal_friendid();
}
inline void MsgFriend::set_friendid(::uint32_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:MC.Msg.MsgFriend.friendid)
}
inline ::uint32_t MsgFriend::_internal_friendid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.friendid_;
}
inline void MsgFriend::_internal_set_friendid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendid_ = value;
}

// string friendname = 2;
inline void MsgFriend::clear_friendname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendname_.ClearToEmpty();
}
inline const std::string& MsgFriend::friendname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.MsgFriend.friendname)
  return _internal_friendname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgFriend::set_friendname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.MsgFriend.friendname)
}
inline std::string* MsgFriend::mutable_friendname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_friendname();
  // @@protoc_insertion_point(field_mutable:MC.Msg.MsgFriend.friendname)
  return _s;
}
inline const std::string& MsgFriend::_internal_friendname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.friendname_.Get();
}
inline void MsgFriend::_internal_set_friendname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendname_.Set(value, GetArena());
}
inline std::string* MsgFriend::_internal_mutable_friendname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.friendname_.Mutable( GetArena());
}
inline std::string* MsgFriend::release_friendname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.MsgFriend.friendname)
  return _impl_.friendname_.Release();
}
inline void MsgFriend::set_allocated_friendname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.friendname_.IsDefault()) {
          _impl_.friendname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.MsgFriend.friendname)
}

// string friendsign = 3;
inline void MsgFriend::clear_friendsign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendsign_.ClearToEmpty();
}
inline const std::string& MsgFriend::friendsign() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.MsgFriend.friendsign)
  return _internal_friendsign();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgFriend::set_friendsign(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendsign_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.MsgFriend.friendsign)
}
inline std::string* MsgFriend::mutable_friendsign() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_friendsign();
  // @@protoc_insertion_point(field_mutable:MC.Msg.MsgFriend.friendsign)
  return _s;
}
inline const std::string& MsgFriend::_internal_friendsign() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.friendsign_.Get();
}
inline void MsgFriend::_internal_set_friendsign(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendsign_.Set(value, GetArena());
}
inline std::string* MsgFriend::_internal_mutable_friendsign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.friendsign_.Mutable( GetArena());
}
inline std::string* MsgFriend::release_friendsign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.MsgFriend.friendsign)
  return _impl_.friendsign_.Release();
}
inline void MsgFriend::set_allocated_friendsign(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friendsign_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.friendsign_.IsDefault()) {
          _impl_.friendsign_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.MsgFriend.friendsign)
}

// string lastcontacttime = 4;
inline void MsgFriend::clear_lastcontacttime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastcontacttime_.ClearToEmpty();
}
inline const std::string& MsgFriend::lastcontacttime() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.MsgFriend.lastcontacttime)
  return _internal_lastcontacttime();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgFriend::set_lastcontacttime(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastcontacttime_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.MsgFriend.lastcontacttime)
}
inline std::string* MsgFriend::mutable_lastcontacttime() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_lastcontacttime();
  // @@protoc_insertion_point(field_mutable:MC.Msg.MsgFriend.lastcontacttime)
  return _s;
}
inline const std::string& MsgFriend::_internal_lastcontacttime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastcontacttime_.Get();
}
inline void MsgFriend::_internal_set_lastcontacttime(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastcontacttime_.Set(value, GetArena());
}
inline std::string* MsgFriend::_internal_mutable_lastcontacttime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.lastcontacttime_.Mutable( GetArena());
}
inline std::string* MsgFriend::release_lastcontacttime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.MsgFriend.lastcontacttime)
  return _impl_.lastcontacttime_.Release();
}
inline void MsgFriend::set_allocated_lastcontacttime(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastcontacttime_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lastcontacttime_.IsDefault()) {
          _impl_.lastcontacttime_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.MsgFriend.lastcontacttime)
}

// -------------------------------------------------------------------

// UserIDList

// .MC.Msg.MCResponseStatusCode code = 1;
inline void UserIDList::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
}
inline ::MC::Msg::MCResponseStatusCode UserIDList::code() const {
  // @@protoc_insertion_point(field_get:MC.Msg.UserIDList.code)
  return _internal_code();
}
inline void UserIDList::set_code(::MC::Msg::MCResponseStatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:MC.Msg.UserIDList.code)
}
inline ::MC::Msg::MCResponseStatusCode UserIDList::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::MC::Msg::MCResponseStatusCode>(_impl_.code_);
}
inline void UserIDList::_internal_set_code(::MC::Msg::MCResponseStatusCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = value;
}

// string errmsg = 2;
inline void UserIDList::clear_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& UserIDList::errmsg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.UserIDList.errmsg)
  return _internal_errmsg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIDList::set_errmsg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.UserIDList.errmsg)
}
inline std::string* UserIDList::mutable_errmsg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:MC.Msg.UserIDList.errmsg)
  return _s;
}
inline const std::string& UserIDList::_internal_errmsg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.errmsg_.Get();
}
inline void UserIDList::_internal_set_errmsg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.Set(value, GetArena());
}
inline std::string* UserIDList::_internal_mutable_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.errmsg_.Mutable( GetArena());
}
inline std::string* UserIDList::release_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.UserIDList.errmsg)
  return _impl_.errmsg_.Release();
}
inline void UserIDList::set_allocated_errmsg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errmsg_.IsDefault()) {
          _impl_.errmsg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.UserIDList.errmsg)
}

// repeated .MC.Msg.MsgFriend friends = 3;
inline int UserIDList::_internal_friends_size() const {
  return _internal_friends().size();
}
inline int UserIDList::friends_size() const {
  return _internal_friends_size();
}
inline void UserIDList::clear_friends() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friends_.Clear();
}
inline ::MC::Msg::MsgFriend* UserIDList::mutable_friends(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MC.Msg.UserIDList.friends)
  return _internal_mutable_friends()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MC::Msg::MsgFriend>* UserIDList::mutable_friends()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MC.Msg.UserIDList.friends)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_friends();
}
inline const ::MC::Msg::MsgFriend& UserIDList::friends(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.UserIDList.friends)
  return _internal_friends().Get(index);
}
inline ::MC::Msg::MsgFriend* UserIDList::add_friends() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::MC::Msg::MsgFriend* _add = _internal_mutable_friends()->Add();
  // @@protoc_insertion_point(field_add:MC.Msg.UserIDList.friends)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MC::Msg::MsgFriend>& UserIDList::friends() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MC.Msg.UserIDList.friends)
  return _internal_friends();
}
inline const ::google::protobuf::RepeatedPtrField<::MC::Msg::MsgFriend>&
UserIDList::_internal_friends() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.friends_;
}
inline ::google::protobuf::RepeatedPtrField<::MC::Msg::MsgFriend>*
UserIDList::_internal_mutable_friends() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.friends_;
}

// -------------------------------------------------------------------

// SendMessageRes

// .MC.Msg.MCResponseStatusCode code = 1;
inline void SendMessageRes::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
}
inline ::MC::Msg::MCResponseStatusCode SendMessageRes::code() const {
  // @@protoc_insertion_point(field_get:MC.Msg.SendMessageRes.code)
  return _internal_code();
}
inline void SendMessageRes::set_code(::MC::Msg::MCResponseStatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:MC.Msg.SendMessageRes.code)
}
inline ::MC::Msg::MCResponseStatusCode SendMessageRes::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::MC::Msg::MCResponseStatusCode>(_impl_.code_);
}
inline void SendMessageRes::_internal_set_code(::MC::Msg::MCResponseStatusCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = value;
}

// -------------------------------------------------------------------

// SendMessageReq

// uint32 sender = 1;
inline void SendMessageReq::clear_sender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sender_ = 0u;
}
inline ::uint32_t SendMessageReq::sender() const {
  // @@protoc_insertion_point(field_get:MC.Msg.SendMessageReq.sender)
  return _internal_sender();
}
inline void SendMessageReq::set_sender(::uint32_t value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:MC.Msg.SendMessageReq.sender)
}
inline ::uint32_t SendMessageReq::_internal_sender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sender_;
}
inline void SendMessageReq::_internal_set_sender(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sender_ = value;
}

// uint32 reciever = 2;
inline void SendMessageReq::clear_reciever() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reciever_ = 0u;
}
inline ::uint32_t SendMessageReq::reciever() const {
  // @@protoc_insertion_point(field_get:MC.Msg.SendMessageReq.reciever)
  return _internal_reciever();
}
inline void SendMessageReq::set_reciever(::uint32_t value) {
  _internal_set_reciever(value);
  // @@protoc_insertion_point(field_set:MC.Msg.SendMessageReq.reciever)
}
inline ::uint32_t SendMessageReq::_internal_reciever() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reciever_;
}
inline void SendMessageReq::_internal_set_reciever(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reciever_ = value;
}

// string msg = 3;
inline void SendMessageReq::clear_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& SendMessageReq::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.SendMessageReq.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendMessageReq::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.SendMessageReq.msg)
}
inline std::string* SendMessageReq::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:MC.Msg.SendMessageReq.msg)
  return _s;
}
inline const std::string& SendMessageReq::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void SendMessageReq::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* SendMessageReq::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* SendMessageReq::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.SendMessageReq.msg)
  return _impl_.msg_.Release();
}
inline void SendMessageReq::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.SendMessageReq.msg)
}

// -------------------------------------------------------------------

// UpdateUserInfoReq

// uint32 userid = 1;
inline void UpdateUserInfoReq::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = 0u;
}
inline ::uint32_t UpdateUserInfoReq::userid() const {
  // @@protoc_insertion_point(field_get:MC.Msg.UpdateUserInfoReq.userid)
  return _internal_userid();
}
inline void UpdateUserInfoReq::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:MC.Msg.UpdateUserInfoReq.userid)
}
inline ::uint32_t UpdateUserInfoReq::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_;
}
inline void UpdateUserInfoReq::_internal_set_userid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = value;
}

// string field = 2;
inline void UpdateUserInfoReq::clear_field() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_.ClearToEmpty();
}
inline const std::string& UpdateUserInfoReq::field() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.UpdateUserInfoReq.field)
  return _internal_field();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateUserInfoReq::set_field(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.UpdateUserInfoReq.field)
}
inline std::string* UpdateUserInfoReq::mutable_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:MC.Msg.UpdateUserInfoReq.field)
  return _s;
}
inline const std::string& UpdateUserInfoReq::_internal_field() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_.Get();
}
inline void UpdateUserInfoReq::_internal_set_field(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_.Set(value, GetArena());
}
inline std::string* UpdateUserInfoReq::_internal_mutable_field() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.field_.Mutable( GetArena());
}
inline std::string* UpdateUserInfoReq::release_field() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.UpdateUserInfoReq.field)
  return _impl_.field_.Release();
}
inline void UpdateUserInfoReq::set_allocated_field(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_.IsDefault()) {
          _impl_.field_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.UpdateUserInfoReq.field)
}

// string value = 3;
inline void UpdateUserInfoReq::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& UpdateUserInfoReq::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.UpdateUserInfoReq.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateUserInfoReq::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.UpdateUserInfoReq.value)
}
inline std::string* UpdateUserInfoReq::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:MC.Msg.UpdateUserInfoReq.value)
  return _s;
}
inline const std::string& UpdateUserInfoReq::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void UpdateUserInfoReq::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* UpdateUserInfoReq::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* UpdateUserInfoReq::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.UpdateUserInfoReq.value)
  return _impl_.value_.Release();
}
inline void UpdateUserInfoReq::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.UpdateUserInfoReq.value)
}

// -------------------------------------------------------------------

// UpdateUserInfoRes

// .MC.Msg.MCResponseStatusCode code = 1;
inline void UpdateUserInfoRes::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
}
inline ::MC::Msg::MCResponseStatusCode UpdateUserInfoRes::code() const {
  // @@protoc_insertion_point(field_get:MC.Msg.UpdateUserInfoRes.code)
  return _internal_code();
}
inline void UpdateUserInfoRes::set_code(::MC::Msg::MCResponseStatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:MC.Msg.UpdateUserInfoRes.code)
}
inline ::MC::Msg::MCResponseStatusCode UpdateUserInfoRes::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::MC::Msg::MCResponseStatusCode>(_impl_.code_);
}
inline void UpdateUserInfoRes::_internal_set_code(::MC::Msg::MCResponseStatusCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = value;
}

// string err_msg = 2;
inline void UpdateUserInfoRes::clear_err_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_msg_.ClearToEmpty();
}
inline const std::string& UpdateUserInfoRes::err_msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.UpdateUserInfoRes.err_msg)
  return _internal_err_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateUserInfoRes::set_err_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.UpdateUserInfoRes.err_msg)
}
inline std::string* UpdateUserInfoRes::mutable_err_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_err_msg();
  // @@protoc_insertion_point(field_mutable:MC.Msg.UpdateUserInfoRes.err_msg)
  return _s;
}
inline const std::string& UpdateUserInfoRes::_internal_err_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.err_msg_.Get();
}
inline void UpdateUserInfoRes::_internal_set_err_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_msg_.Set(value, GetArena());
}
inline std::string* UpdateUserInfoRes::_internal_mutable_err_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.err_msg_.Mutable( GetArena());
}
inline std::string* UpdateUserInfoRes::release_err_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.UpdateUserInfoRes.err_msg)
  return _impl_.err_msg_.Release();
}
inline void UpdateUserInfoRes::set_allocated_err_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.err_msg_.IsDefault()) {
          _impl_.err_msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.UpdateUserInfoRes.err_msg)
}

// string new_value = 3;
inline void UpdateUserInfoRes::clear_new_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_value_.ClearToEmpty();
}
inline const std::string& UpdateUserInfoRes::new_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.UpdateUserInfoRes.new_value)
  return _internal_new_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateUserInfoRes::set_new_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.UpdateUserInfoRes.new_value)
}
inline std::string* UpdateUserInfoRes::mutable_new_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_value();
  // @@protoc_insertion_point(field_mutable:MC.Msg.UpdateUserInfoRes.new_value)
  return _s;
}
inline const std::string& UpdateUserInfoRes::_internal_new_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_value_.Get();
}
inline void UpdateUserInfoRes::_internal_set_new_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_value_.Set(value, GetArena());
}
inline std::string* UpdateUserInfoRes::_internal_mutable_new_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.new_value_.Mutable( GetArena());
}
inline std::string* UpdateUserInfoRes::release_new_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.UpdateUserInfoRes.new_value)
  return _impl_.new_value_.Release();
}
inline void UpdateUserInfoRes::set_allocated_new_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_value_.IsDefault()) {
          _impl_.new_value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.UpdateUserInfoRes.new_value)
}

// -------------------------------------------------------------------

// UpdateUserHeadReq

// uint32 userid = 1;
inline void UpdateUserHeadReq::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = 0u;
}
inline ::uint32_t UpdateUserHeadReq::userid() const {
  // @@protoc_insertion_point(field_get:MC.Msg.UpdateUserHeadReq.userid)
  return _internal_userid();
}
inline void UpdateUserHeadReq::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:MC.Msg.UpdateUserHeadReq.userid)
}
inline ::uint32_t UpdateUserHeadReq::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_;
}
inline void UpdateUserHeadReq::_internal_set_userid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = value;
}

// string pic = 2;
inline void UpdateUserHeadReq::clear_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pic_.ClearToEmpty();
}
inline const std::string& UpdateUserHeadReq::pic() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.UpdateUserHeadReq.pic)
  return _internal_pic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateUserHeadReq::set_pic(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pic_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.UpdateUserHeadReq.pic)
}
inline std::string* UpdateUserHeadReq::mutable_pic() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pic();
  // @@protoc_insertion_point(field_mutable:MC.Msg.UpdateUserHeadReq.pic)
  return _s;
}
inline const std::string& UpdateUserHeadReq::_internal_pic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pic_.Get();
}
inline void UpdateUserHeadReq::_internal_set_pic(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pic_.Set(value, GetArena());
}
inline std::string* UpdateUserHeadReq::_internal_mutable_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.pic_.Mutable( GetArena());
}
inline std::string* UpdateUserHeadReq::release_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.UpdateUserHeadReq.pic)
  return _impl_.pic_.Release();
}
inline void UpdateUserHeadReq::set_allocated_pic(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pic_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pic_.IsDefault()) {
          _impl_.pic_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.UpdateUserHeadReq.pic)
}

// -------------------------------------------------------------------

// UpdateUserHeadRes

// .MC.Msg.MCResponseStatusCode code = 1;
inline void UpdateUserHeadRes::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
}
inline ::MC::Msg::MCResponseStatusCode UpdateUserHeadRes::code() const {
  // @@protoc_insertion_point(field_get:MC.Msg.UpdateUserHeadRes.code)
  return _internal_code();
}
inline void UpdateUserHeadRes::set_code(::MC::Msg::MCResponseStatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:MC.Msg.UpdateUserHeadRes.code)
}
inline ::MC::Msg::MCResponseStatusCode UpdateUserHeadRes::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::MC::Msg::MCResponseStatusCode>(_impl_.code_);
}
inline void UpdateUserHeadRes::_internal_set_code(::MC::Msg::MCResponseStatusCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = value;
}

// string err_msg = 2;
inline void UpdateUserHeadRes::clear_err_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_msg_.ClearToEmpty();
}
inline const std::string& UpdateUserHeadRes::err_msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.UpdateUserHeadRes.err_msg)
  return _internal_err_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateUserHeadRes::set_err_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.UpdateUserHeadRes.err_msg)
}
inline std::string* UpdateUserHeadRes::mutable_err_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_err_msg();
  // @@protoc_insertion_point(field_mutable:MC.Msg.UpdateUserHeadRes.err_msg)
  return _s;
}
inline const std::string& UpdateUserHeadRes::_internal_err_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.err_msg_.Get();
}
inline void UpdateUserHeadRes::_internal_set_err_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_msg_.Set(value, GetArena());
}
inline std::string* UpdateUserHeadRes::_internal_mutable_err_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.err_msg_.Mutable( GetArena());
}
inline std::string* UpdateUserHeadRes::release_err_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.UpdateUserHeadRes.err_msg)
  return _impl_.err_msg_.Release();
}
inline void UpdateUserHeadRes::set_allocated_err_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.err_msg_.IsDefault()) {
          _impl_.err_msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.UpdateUserHeadRes.err_msg)
}

// string url = 3;
inline void UpdateUserHeadRes::clear_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& UpdateUserHeadRes::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.UpdateUserHeadRes.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateUserHeadRes::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.UpdateUserHeadRes.url)
}
inline std::string* UpdateUserHeadRes::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:MC.Msg.UpdateUserHeadRes.url)
  return _s;
}
inline const std::string& UpdateUserHeadRes::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void UpdateUserHeadRes::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.Set(value, GetArena());
}
inline std::string* UpdateUserHeadRes::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* UpdateUserHeadRes::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.UpdateUserHeadRes.url)
  return _impl_.url_.Release();
}
inline void UpdateUserHeadRes::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.UpdateUserHeadRes.url)
}

// -------------------------------------------------------------------

// GetUserInfoReq

// uint32 userid = 1;
inline void GetUserInfoReq::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = 0u;
}
inline ::uint32_t GetUserInfoReq::userid() const {
  // @@protoc_insertion_point(field_get:MC.Msg.GetUserInfoReq.userid)
  return _internal_userid();
}
inline void GetUserInfoReq::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:MC.Msg.GetUserInfoReq.userid)
}
inline ::uint32_t GetUserInfoReq::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_;
}
inline void GetUserInfoReq::_internal_set_userid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// GetUserInfoRes

// .MC.Msg.MCResponseStatusCode code = 1;
inline void GetUserInfoRes::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
}
inline ::MC::Msg::MCResponseStatusCode GetUserInfoRes::code() const {
  // @@protoc_insertion_point(field_get:MC.Msg.GetUserInfoRes.code)
  return _internal_code();
}
inline void GetUserInfoRes::set_code(::MC::Msg::MCResponseStatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:MC.Msg.GetUserInfoRes.code)
}
inline ::MC::Msg::MCResponseStatusCode GetUserInfoRes::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::MC::Msg::MCResponseStatusCode>(_impl_.code_);
}
inline void GetUserInfoRes::_internal_set_code(::MC::Msg::MCResponseStatusCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = value;
}

// string err_msg = 2;
inline void GetUserInfoRes::clear_err_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_msg_.ClearToEmpty();
}
inline const std::string& GetUserInfoRes::err_msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.GetUserInfoRes.err_msg)
  return _internal_err_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetUserInfoRes::set_err_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.GetUserInfoRes.err_msg)
}
inline std::string* GetUserInfoRes::mutable_err_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_err_msg();
  // @@protoc_insertion_point(field_mutable:MC.Msg.GetUserInfoRes.err_msg)
  return _s;
}
inline const std::string& GetUserInfoRes::_internal_err_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.err_msg_.Get();
}
inline void GetUserInfoRes::_internal_set_err_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_msg_.Set(value, GetArena());
}
inline std::string* GetUserInfoRes::_internal_mutable_err_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.err_msg_.Mutable( GetArena());
}
inline std::string* GetUserInfoRes::release_err_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.GetUserInfoRes.err_msg)
  return _impl_.err_msg_.Release();
}
inline void GetUserInfoRes::set_allocated_err_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.err_msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.err_msg_.IsDefault()) {
          _impl_.err_msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.GetUserInfoRes.err_msg)
}

// string name = 3;
inline void GetUserInfoRes::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetUserInfoRes::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.GetUserInfoRes.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetUserInfoRes::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.GetUserInfoRes.name)
}
inline std::string* GetUserInfoRes::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:MC.Msg.GetUserInfoRes.name)
  return _s;
}
inline const std::string& GetUserInfoRes::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetUserInfoRes::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetUserInfoRes::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetUserInfoRes::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.GetUserInfoRes.name)
  return _impl_.name_.Release();
}
inline void GetUserInfoRes::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.GetUserInfoRes.name)
}

// string pic = 4;
inline void GetUserInfoRes::clear_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pic_.ClearToEmpty();
}
inline const std::string& GetUserInfoRes::pic() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.GetUserInfoRes.pic)
  return _internal_pic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetUserInfoRes::set_pic(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pic_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.GetUserInfoRes.pic)
}
inline std::string* GetUserInfoRes::mutable_pic() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pic();
  // @@protoc_insertion_point(field_mutable:MC.Msg.GetUserInfoRes.pic)
  return _s;
}
inline const std::string& GetUserInfoRes::_internal_pic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pic_.Get();
}
inline void GetUserInfoRes::_internal_set_pic(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pic_.Set(value, GetArena());
}
inline std::string* GetUserInfoRes::_internal_mutable_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.pic_.Mutable( GetArena());
}
inline std::string* GetUserInfoRes::release_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.GetUserInfoRes.pic)
  return _impl_.pic_.Release();
}
inline void GetUserInfoRes::set_allocated_pic(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pic_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pic_.IsDefault()) {
          _impl_.pic_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.GetUserInfoRes.pic)
}

// string sign = 5;
inline void GetUserInfoRes::clear_sign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sign_.ClearToEmpty();
}
inline const std::string& GetUserInfoRes::sign() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MC.Msg.GetUserInfoRes.sign)
  return _internal_sign();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetUserInfoRes::set_sign(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sign_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MC.Msg.GetUserInfoRes.sign)
}
inline std::string* GetUserInfoRes::mutable_sign() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:MC.Msg.GetUserInfoRes.sign)
  return _s;
}
inline const std::string& GetUserInfoRes::_internal_sign() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sign_.Get();
}
inline void GetUserInfoRes::_internal_set_sign(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sign_.Set(value, GetArena());
}
inline std::string* GetUserInfoRes::_internal_mutable_sign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.sign_.Mutable( GetArena());
}
inline std::string* GetUserInfoRes::release_sign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MC.Msg.GetUserInfoRes.sign)
  return _impl_.sign_.Release();
}
inline void GetUserInfoRes::set_allocated_sign(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sign_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sign_.IsDefault()) {
          _impl_.sign_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MC.Msg.GetUserInfoRes.sign)
}

// repeated uint32 friends = 6;
inline int GetUserInfoRes::_internal_friends_size() const {
  return _internal_friends().size();
}
inline int GetUserInfoRes::friends_size() const {
  return _internal_friends_size();
}
inline void GetUserInfoRes::clear_friends() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.friends_.Clear();
}
inline ::uint32_t GetUserInfoRes::friends(int index) const {
  // @@protoc_insertion_point(field_get:MC.Msg.GetUserInfoRes.friends)
  return _internal_friends().Get(index);
}
inline void GetUserInfoRes::set_friends(int index, ::uint32_t value) {
  _internal_mutable_friends()->Set(index, value);
  // @@protoc_insertion_point(field_set:MC.Msg.GetUserInfoRes.friends)
}
inline void GetUserInfoRes::add_friends(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_friends()->Add(value);
  // @@protoc_insertion_point(field_add:MC.Msg.GetUserInfoRes.friends)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& GetUserInfoRes::friends() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MC.Msg.GetUserInfoRes.friends)
  return _internal_friends();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* GetUserInfoRes::mutable_friends()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MC.Msg.GetUserInfoRes.friends)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_friends();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
GetUserInfoRes::_internal_friends() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.friends_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* GetUserInfoRes::_internal_mutable_friends() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.friends_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Msg
}  // namespace MC


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::MC::Msg::MCResponseStatusCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::MC::Msg::MCResponseStatusCode>() {
  return ::MC::Msg::MCResponseStatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_MC_2eMsg_2eproto_2epb_2eh
